/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package visual.gui;

import comm.ClientConnectedException;
import comm.TR_ClientConnector;
import events.MyChangeEvent;
import events.MyChangeListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 * Janela com informações e configurações da conexão com o robô.
 *
 * @author stefan
 */
public class JanelaConexao extends javax.swing.JFrame {

    ConnectionChangeListener listener;
    TR_ClientConnector connector;

    /**
     * Creates new form JanelaConexao
     */
    public JanelaConexao(TR_ClientConnector connector) {
        this.connector = connector;
        initComponents();
        listener = new ConnectionChangeListener(this);
        connector.addMyChangeListener(listener);
        statusLabel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ipComboBox = new javax.swing.JComboBox();
        portaComboBox = new javax.swing.JComboBox();
        connectButton = new javax.swing.JButton();
        ipLabel = new javax.swing.JLabel();
        portaLabel = new javax.swing.JLabel();
        connectionLogScrollPane = new javax.swing.JScrollPane();
        connectionLogTextArea = new visual.gui.ConnectionLogTextArea();
        statusLabel = new javax.swing.JLabel();

        setTitle("Bellator - Conexão");

        ipComboBox.setEditable(true);
        ipComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "127.0.0.1" }));

        portaComboBox.setEditable(true);
        portaComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "12312" }));
        portaComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portaComboBoxActionPerformed(evt);
            }
        });

        connectButton.setText("Conectar");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        ipLabel.setText("IP");

        portaLabel.setText("Porta");

        connectionLogScrollPane.setAutoscrolls(true);

        connectionLogTextArea.setEditable(false);
        connectionLogTextArea.setColumns(20);
        connectionLogTextArea.setRows(5);
        connectionLogTextArea.setAutoscrolls(true);
        connectionLogScrollPane.setViewportView(connectionLogTextArea);

        statusLabel.setText("Status");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(connectionLogScrollPane)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ipLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(portaLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ipComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(portaComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(connectButton)
                            .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 296, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ipComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ipLabel)
                    .addComponent(statusLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(portaComboBox)
                        .addComponent(portaLabel))
                    .addComponent(connectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectionLogScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void portaComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portaComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_portaComboBoxActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // TODO add your handling code here:
        int status = connector.getConnectionStatus();
        if (status == TR_ClientConnector.DISCONNECTED) {
            try {
                //Tenta conectar ao host especificado.
                connector.connect((String) ipComboBox.getSelectedItem(),
                                  Integer.parseInt((String) portaComboBox.getSelectedItem()));
            } catch (ClientConnectedException ex) {
                Logger.getLogger(JanelaConexao.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (status == TR_ClientConnector.CONNECTED || status == TR_ClientConnector.CONNECTED_HANDSHAKE) {
            //Tenta desconectar do host se já estiver conectado.
            connector.disconnect();
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JanelaConexao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JanelaConexao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JanelaConexao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JanelaConexao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new JanelaConexao().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JScrollPane connectionLogScrollPane;
    private visual.gui.ConnectionLogTextArea connectionLogTextArea;
    private javax.swing.JComboBox ipComboBox;
    private javax.swing.JLabel ipLabel;
    private javax.swing.JComboBox portaComboBox;
    private javax.swing.JLabel portaLabel;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Classe responsável por "escutar" mudanças na conexão.
     */
    class ConnectionChangeListener implements MyChangeListener {

        //Janela pai
        JFrame janelaConexao;

        public ConnectionChangeListener(JFrame janela) {
            this.janelaConexao = janela;
        }

        /**
         * Ações a serem executadas quando um evento de mudança na conexão for detectado.
         *
         * @param evt Evento de mudança.
         */
        @Override
        public void changeEventReceived(MyChangeEvent evt) {
            connectionLogTextArea.changeEventReceived(evt);
            //Mudança de status da conexão. 
            if (evt.getSource() instanceof TR_ClientConnector) {
                TR_ClientConnector connector = (TR_ClientConnector) evt.getSource();
                int status = connector.getConnectionStatus();
                if (status == TR_ClientConnector.CONNECTED) {
                    ipComboBox.setEnabled(false);
                    portaComboBox.setEnabled(false);
                    connectButton.setText("Desconectar");
                    connectButton.setEnabled(true);
                    janelaConexao.setTitle("Bellator - Conexão [Conectado]");
                    statusLabel.setText("Conectado");
                } else if (status == TR_ClientConnector.CONNECTED_HANDSHAKE) {
                    ipComboBox.setEnabled(false);
                    portaComboBox.setEnabled(false);
                    connectButton.setText("Desconectar");
                    connectButton.setEnabled(true);
                    janelaConexao.setTitle("Bellator - Conexão [Conectado (handshake...)]");
                    statusLabel.setText("Conectado");
                } else if (status == TR_ClientConnector.CONNECTING) {
                    ipComboBox.setEnabled(false);
                    portaComboBox.setEnabled(false);
                    connectButton.setText("Conectando...");
                    connectButton.setEnabled(false);
                    janelaConexao.setTitle("Bellator - Conexão [Conectando...]");
                    statusLabel.setText("Conectando...");
                } else if (status == TR_ClientConnector.DISCONNECTED) {
                    ipComboBox.setEnabled(true);
                    portaComboBox.setEnabled(true);
                    connectButton.setText("Conectar");
                    connectButton.setEnabled(true);
                    janelaConexao.setTitle("Bellator - Conexão [Desconectado]");
                    statusLabel.setText("Desconectado");
                }
            }
        }
    }
}
