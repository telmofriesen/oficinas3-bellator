package visual.gui;

import comm.TR_ClientConnector;
import controle.ControleSensores;
import events.MyChangeEvent;
import events.MyChangeListener;
import javax.swing.JButton;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;

/**
 * Janela responsável pela configuração dos sensores.
 * @author stefan
 */
public class JanelaSensores extends javax.swing.JFrame implements MyChangeListener {

    /**
     * Método chamado quando é recebido um evento de mudança.
     * @param evt 
     */
    @Override
    public void changeEventReceived(MyChangeEvent evt) {
        //Se o status da conexão mudar...
        if (evt.getSource() instanceof TR_ClientConnector) {
            TR_ClientConnector c = (TR_ClientConnector) evt.getSource();
            if (!c.isConnected()) {
                 //Fecha a janela se a conexão for perdida.
                this.setVisible(false);
            } else {
                if (lastConnectionStatus != c.getConnectionStatus() && c.isConnected()) {
                    //Envia o valor de sample rate ao robô quando a conexão for iniciada
                    sendSampleRateValue();
                }
            }
            lastConnectionStatus = c.getConnectionStatus();
        }
        //Se o status em ControleSensores mudar...
        if (evt.getSource() instanceof ControleSensores) {
            ControleSensores contr = (ControleSensores) evt.getSource();
            int status = contr.getSensorSampleStatus();
            switch (status) {
                case ControleSensores.SAMPLE_STOPPED:
                    sensorsStatusLabel.setText("Recebimento de amostras: Desativado.");
                    activateSensorsButton.setEnabled(true);
                    activateSensorsButton.setText("ATIVAR");
                    break;
                case ControleSensores.SAMPLE_CHANGING:
                    if (lastSampleStatus == ControleSensores.SAMPLE_STOPPED) {
                        sensorsStatusLabel.setText("Recebimento de amostras: Ativando...");
                        activateSensorsButton.setText("Ativando...");
                    }
                    if (lastSampleStatus == ControleSensores.SAMPLE_STARTED) {
                        sensorsStatusLabel.setText("Recebimento de amostras: Desativando...");
                        activateSensorsButton.setText("Desativando...");
                    }
                    activateSensorsButton.setEnabled(false);
                    break;
                case ControleSensores.SAMPLE_STARTED:
                    sensorsStatusLabel.setText("Recebimento de amostras: Ativado.");
                    activateSensorsButton.setEnabled(true);
                    activateSensorsButton.setText("DESATIVAR");
                    break;
            }
            lastSampleStatus = status;
        }
    }
    int lastSampleStatus = -1;
    int lastConnectionStatus = -1;
    ControleSensores controle;
    TR_ClientConnector connector;

    /**
     * Creates new form JanelaSensores
     */
    public JanelaSensores(ControleSensores controle, TR_ClientConnector connector) {
        this.controle = controle;
        this.connector = connector;
        initComponents();
//        controle.addMyChangeListener(this);
        //Valores minimo e maximo do FloatJSlider.
        sampleRateSlider.setF_min(0.2f);
        sampleRateSlider.setF_max(10f);
//        sampleRateSlider.setValue(100);
        sampleRateSlider.setFloatValue(1);
        sampleRateTextField.setText(String.format("%.1f", sampleRateSlider.getFloatValue()));
//        jToolBar1.setVisible(false);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sensorsStatusLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        activateSensorsButton = new javax.swing.JButton();
        sampleRateSlider = new visual.gui.FloatJSlider();
        sampleRateTextField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bellator - Sensores");

        sensorsStatusLabel.setText("Recebimento de amostras: Desativado");

        jLabel2.setText("Taxa de amostragem (amostras/s):");

        jToolBar1.setFloatable(false);
        jToolBar1.setBorderPainted(false);
        jToolBar1.setEnabled(false);
        jToolBar1.setFocusable(false);
        jToolBar1.setMinimumSize(new java.awt.Dimension(0, 0));
        jToolBar1.setPreferredSize(new java.awt.Dimension(0, 0));

        activateSensorsButton.setText("Ativar");
        activateSensorsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activateSensorsButtonActionPerformed(evt);
            }
        });

        sampleRateSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sampleRateSliderMouseReleased(evt);
            }
        });
        sampleRateSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sampleRateSliderStateChanged(evt);
            }
        });

        sampleRateTextField.setEditable(false);
        sampleRateTextField.setText("1");
        sampleRateTextField.setFocusable(false);
        sampleRateTextField.setMinimumSize(new java.awt.Dimension(20, 26));
        sampleRateTextField.setPreferredSize(new java.awt.Dimension(40, 26));
        sampleRateTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sampleRateTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(sampleRateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sampleRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(sensorsStatusLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(activateSensorsButton)))
                        .addGap(0, 14, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sensorsStatusLabel)
                    .addComponent(activateSensorsButton))
                .addGap(12, 12, 12)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sampleRateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sampleRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void activateSensorsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activateSensorsButtonActionPerformed
        // TODO add your handling code here:
        int status = controle.getSensorSampleStatus();
        switch (status) {
            case ControleSensores.SAMPLE_STOPPED:
                controle.setSensorSampleStatus(ControleSensores.SAMPLE_CHANGING);
                connector.sendMessage("SENSORS START", true);
                break;
            case ControleSensores.SAMPLE_STARTED:
                controle.setSensorSampleStatus(ControleSensores.SAMPLE_CHANGING);
                connector.sendMessage("SENSORS STOP", true);
                break;
        }
    }//GEN-LAST:event_activateSensorsButtonActionPerformed

    private void sampleRateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sampleRateTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sampleRateTextFieldActionPerformed

    private void sampleRateSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sampleRateSliderStateChanged
        // TODO add your handling code here:
        sampleRateTextField.setText(String.format("%.1f", sampleRateSlider.getFloatValue()));
        if (!sampleRateSlider.getValueIsAdjusting()) {
            //Ajusta o valor do sample rate no robô
            sendSampleRateValue();
        }
    }//GEN-LAST:event_sampleRateSliderStateChanged

    private void sampleRateSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sampleRateSliderMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_sampleRateSliderMouseReleased

    /**
     * Envia o valor de sample rate (especificado na configuração) para o robô.
     */
    public void sendSampleRateValue() {
        if (connector.isConnected()){
            connector.sendMessage(String.format("SENSORS SAMPLE_RATE %.1f", sampleRateSlider.getFloatValue()), true);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JanelaSensores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JanelaSensores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JanelaSensores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JanelaSensores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new JanelaSensores().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton activateSensorsButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private visual.gui.FloatJSlider sampleRateSlider;
    private javax.swing.JTextField sampleRateTextField;
    private javax.swing.JLabel sensorsStatusLabel;
    // End of variables declaration//GEN-END:variables
}
