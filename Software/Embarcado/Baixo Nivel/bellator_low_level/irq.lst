   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 2
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 18, 4
  11              		.file	"irq.c"
  19              	.Ltext0:
  20              		.align	2
  21              		.global	enableIRQ
  23              	enableIRQ:
  24              	.LFB4:
  25              		.file 1 "irq.c"
   1:irq.c         **** /*
   2:irq.c         ****  * irq.c
   3:irq.c         ****  *
   4:irq.c         ****  *  Created on: Jul 15, 2009
   5:irq.c         ****  *      Author: telmo
   6:irq.c         ****  */
   7:irq.c         **** 
   8:irq.c         **** #include "irq.h"
   9:irq.c         **** 
  10:irq.c         **** #define ENABLE_INTERRUPTS() \
  11:irq.c         **** asm volatile ( \
  12:irq.c         **** 		"STMDB SP!, {R0} \n\t" /* Pu=sh R0. */ \
  13:irq.c         **** 		"MRS R0, CPSR \n\t" /* Get CPSR. */ \
  14:irq.c         **** 		"BIC R0, R0, #0xC0 \n\t" /* Enable IRQ, FIQ. */ \
  15:irq.c         **** 		"MSR CPSR, R0 \n\t" /* Write back modified value. */ \
  16:irq.c         **** 		"LDMIA SP!, {R0}" ); /* Pop R0. */
  17:irq.c         **** 
  18:irq.c         **** 
  19:irq.c         **** static inline unsigned asm_get_cpsr(void)
  20:irq.c         **** {
  21:irq.c         ****   unsigned long retval;
  22:irq.c         ****   asm volatile (" mrs  %0, cpsr" : "=r" (retval) : /* no inputs */  );
  23:irq.c         ****   return retval;
  24:irq.c         **** }
  25:irq.c         **** 
  26:irq.c         **** static inline void asm_set_cpsr(unsigned val)
  27:irq.c         **** {
  28:irq.c         ****   asm volatile (" msr  cpsr, %0" : /* no outputs */ : "r" (val)  );
  29:irq.c         **** }
  30:irq.c         **** 
  31:irq.c         **** unsigned enableIRQ(void)
  32:irq.c         **** {
  26              		.loc 1 32 0
  27              		@ Function supports interworking.
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              		@ lr needed for prologue
  32              	.LBB6:
  33              	.LBB7:
  34              		.loc 1 22 0
  35              	#APP
  36 0000 00000FE1 		 mrs  r0, cpsr
  37              	.LVL0:
  38              	.LBE7:
  39              	.LBE6:
  40              	.LBB8:
  41              	.LBB9:
  42              		.loc 1 28 0
  43 0004 8030C0E3 		bic	r3, r0, #128
  44              	#APP
  45 0008 03F029E1 		 msr  cpsr, r3
  46              	.LVL1:
  47              	.LBE9:
  48              	.LBE8:
  33:irq.c         ****   unsigned _cpsr;
  34:irq.c         **** 
  35:irq.c         ****   _cpsr = asm_get_cpsr();
  36:irq.c         ****   asm_set_cpsr(_cpsr & ~IRQ_MASK);
  37:irq.c         ****   return _cpsr;
  38:irq.c         **** }
  49              		.loc 1 38 0
  50 000c 1EFF2FE1 		bx	lr
  51              	.LFE4:
  53              		.align	2
  54              		.global	restoreIRQ
  56              	restoreIRQ:
  57              	.LFB6:
  39:irq.c         **** 
  40:irq.c         **** unsigned disableIRQ(void)
  41:irq.c         **** {
  42:irq.c         ****   unsigned _cpsr;
  43:irq.c         **** 
  44:irq.c         ****   _cpsr = asm_get_cpsr();
  45:irq.c         ****   asm_set_cpsr(_cpsr | IRQ_MASK);
  46:irq.c         ****   return _cpsr;
  47:irq.c         **** }
  48:irq.c         **** 
  49:irq.c         **** unsigned restoreIRQ(unsigned oldCPSR)
  50:irq.c         **** {
  58              		.loc 1 50 0
  59              		@ Function supports interworking.
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63              	.LVL2:
  64              		@ lr needed for prologue
  65              	.LBB14:
  66              	.LBB15:
  67              		.loc 1 22 0
  68              	#APP
  69 0010 00200FE1 		 mrs  r2, cpsr
  70              	.LVL3:
  71              	.LBE15:
  72              	.LBE14:
  73              	.LBB16:
  74              	.LBB17:
  75              		.loc 1 28 0
  76 0014 800000E2 		and	r0, r0, #128
  77              	.LVL4:
  78 0018 8030C2E3 		bic	r3, r2, #128
  79 001c 003083E1 		orr	r3, r3, r0
  80              	#APP
  81 0020 03F029E1 		 msr  cpsr, r3
  82              	.LBE17:
  83              	.LBE16:
  51:irq.c         ****   unsigned _cpsr;
  52:irq.c         **** 
  53:irq.c         ****   _cpsr = asm_get_cpsr();
  54:irq.c         ****   asm_set_cpsr((_cpsr & ~IRQ_MASK) | (oldCPSR & IRQ_MASK));
  55:irq.c         ****   return _cpsr;
  56:irq.c         **** }
  84              		.loc 1 56 0
  85 0024 0200A0E1 		mov	r0, r2
  86 0028 1EFF2FE1 		bx	lr
  87              	.LFE6:
  89              		.align	2
  90              		.global	disableIRQ
  92              	disableIRQ:
  93              	.LFB5:
  94              		.loc 1 41 0
  95              		@ Function supports interworking.
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              		@ link register save eliminated.
  99              		@ lr needed for prologue
 100              	.LBB22:
 101              	.LBB23:
 102              		.loc 1 22 0
 103              	#APP
 104 002c 00000FE1 		 mrs  r0, cpsr
 105              	.LVL5:
 106              	.LBE23:
 107              	.LBE22:
 108              	.LBB24:
 109              	.LBB25:
 110              		.loc 1 28 0
 111 0030 803080E3 		orr	r3, r0, #128
 112              	#APP
 113 0034 03F029E1 		 msr  cpsr, r3
 114              	.LVL6:
 115              	.LBE25:
 116              	.LBE24:
 117              		.loc 1 47 0
 118 0038 1EFF2FE1 		bx	lr
 119              	.LFE5:
 161              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 irq.c
     /tmp/ccKfKmfd.s:23     .text:00000000 enableIRQ
     /tmp/ccKfKmfd.s:36     .text:00000000 $a
     /tmp/ccKfKmfd.s:56     .text:00000010 restoreIRQ
     /tmp/ccKfKmfd.s:92     .text:0000002c disableIRQ
     /tmp/ccKfKmfd.s:123    .debug_frame:00000000 $d
     /tmp/ccKfKmfd.s:165    .debug_loc:00000000 $d

NO UNDEFINED SYMBOLS
