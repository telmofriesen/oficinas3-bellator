
bellator_low_level.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001495  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab    00000024  00001498  00001498  00009498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    000000a0  000014bc  000014bc  000094bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .interp       00000013  0000155c  0000155c  0000955c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .gnu.version  0000000c  00001570  00001570  00009570  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .gnu.version_r 00000020  0000157c  0000157c  0000957c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dynsym       00000060  0000159c  0000159c  0000959c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .dynstr       0000006a  000015fc  000015fc  000095fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .hash         0000002c  00001668  00001668  00009668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .dynamic      00000090  40000000  00001694  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .got.plt      0000000c  40000090  00001724  00010090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000e78  4000009c  00001730  0001009c  2**2
                  ALLOC
 12 .stack        00000400  40000f14  000025a8  0001009c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0001009c  2**0
                  CONTENTS, READONLY
 14 .comment      0000002a  00000000  00000000  000100ca  2**0
                  CONTENTS, READONLY
 15 .debug_aranges 00000040  00000000  00000000  000100f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_pubnames 000003a7  00000000  00000000  00010138  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_info   00000f27  00000000  00000000  000104df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 000003a7  00000000  00000000  00011406  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00000458  00000000  00000000  000117ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  0000041c  00000000  00000000  00011c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0000058e  00000000  00000000  00012024  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_loc    00000a2f  00000000  00000000  000125b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes 0000002c  00000000  00000000  00012fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_ranges 00000090  00000000  00000000  0001300d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_boot>:
_boot:

// Runtime Interrupt Vectors
// -------------------------
Vectors:
        b     _start                    // reset - _start
       0:	ea000012 	b	50 <_mainCRTStartup>
        ldr   pc,_undf                  // undefined - _undf
       4:	e59ff014 	ldr	pc, [pc, #20]	; 20 <_undf>
        ldr   pc,_swi                   // SWI - _swi
       8:	e59ff014 	ldr	pc, [pc, #20]	; 24 <_swi>
        ldr   pc,_pabt                  // program abort - _pabt
       c:	e59ff014 	ldr	pc, [pc, #20]	; 28 <_pabt>
        ldr   pc,_dabt                  // data abort - _dabt
      10:	e59ff014 	ldr	pc, [pc, #20]	; 2c <_dabt>
        nop                             // reserved
      14:	e1a00000 	nop			; (mov r0, r0)
        ldr   pc,[pc,#-0xFF0]           // IRQ - read the VIC
      18:	e51ffff0 	ldr	pc, [pc, #-4080]	; fffff030 <_end+0xbfffdd1c>
        ldr   pc,_fiq                   // FIQ - _fiq
      1c:	e59ff010 	ldr	pc, [pc, #16]	; 34 <_fiq>

00000020 <_undf>:
      20:	00000038 	.word	0x00000038

00000024 <_swi>:
      24:	0000003c 	.word	0x0000003c

00000028 <_pabt>:
      28:	00000040 	.word	0x00000040

0000002c <_dabt>:
      2c:	00000044 	.word	0x00000044

00000030 <_irq>:
      30:	00000048 	.word	0x00000048

00000034 <_fiq>:
      34:	0000004c 	.word	0x0000004c

00000038 <__undf>:
_pabt:  .word __pabt                    // program abort
_dabt:  .word __dabt                    // data abort
_irq:   .word __irq                     // IRQ
_fiq:   .word __fiq                     // FIQ

__undf: b     .                         // undefined
      38:	eafffffe 	b	38 <__undf>

0000003c <__swi>:
__swi:  b     .                         // SWI
      3c:	eafffffe 	b	3c <__swi>

00000040 <__pabt>:
__pabt: b     .                         // program abort
      40:	eafffffe 	b	40 <__pabt>

00000044 <__dabt>:
__dabt: b     .                         // data abort
      44:	eafffffe 	b	44 <__dabt>

00000048 <__irq>:
__irq:  b     .                         // IRQ
      48:	eafffffe 	b	48 <__irq>

0000004c <__fiq>:
//__fiq:  b     .				            // FIQ
__fiq:  b     encoder_pulse_in_isr      // FIQ
      4c:	ea0003fe 	b	104c <encoder_pulse_in_isr>

00000050 <_mainCRTStartup>:

// Initialize Interrupt System
// - Set stack location for each mode
// - Leave in System Mode with Interrupts Disabled
// -----------------------------------------------
        ldr   r0,=_stack
      50:	e59f0098 	ldr	r0, [pc, #152]	; f0 <abort+0x4>
        msr   CPSR_c,#MODE_UND|I_BIT|F_BIT // Undefined Instruction Mode
      54:	e321f0db 	msr	CPSR_c, #219	; 0xdb
        mov   sp,r0
      58:	e1a0d000 	mov	sp, r0
        sub   r0,r0,#UND_STACK_SIZE
      5c:	e2400004 	sub	r0, r0, #4
        msr   CPSR_c,#MODE_ABT|I_BIT|F_BIT // Abort Mode
      60:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
        mov   sp,r0
      64:	e1a0d000 	mov	sp, r0
        sub   r0,r0,#ABT_STACK_SIZE
      68:	e2400004 	sub	r0, r0, #4
        msr   CPSR_c,#MODE_FIQ|I_BIT|F_BIT // FIQ Mode
      6c:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
        mov   sp,r0
      70:	e1a0d000 	mov	sp, r0
        sub   r0,r0,#FIQ_STACK_SIZE
      74:	e2400004 	sub	r0, r0, #4
        msr   CPSR_c,#MODE_IRQ|I_BIT|F_BIT // IRQ Mode
      78:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
        mov   sp,r0
      7c:	e1a0d000 	mov	sp, r0
        sub   r0,r0,#IRQ_STACK_SIZE
      80:	e2400080 	sub	r0, r0, #128	; 0x80
        msr   CPSR_c,#MODE_SVC|I_BIT|F_BIT // Supervisor Mode
      84:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
        mov   sp,r0
      88:	e1a0d000 	mov	sp, r0
        sub   r0,r0,#SVC_STACK_SIZE
      8c:	e2400004 	sub	r0, r0, #4
        msr   CPSR_c,#MODE_SYS|I_BIT|F_BIT // System Mode
      90:	e321f0df 	msr	CPSR_c, #223	; 0xdf
        mov   sp,r0
      94:	e1a0d000 	mov	sp, r0


// Copy initialized data to its execution address in RAM
// -----------------------------------------------------
#ifdef ROM_RUN
        ldr   r1,=_etext                // -> ROM data start
      98:	e59f1054 	ldr	r1, [pc, #84]	; f4 <abort+0x8>
        ldr   r2,=_data                 // -> data start
      9c:	e59f2054 	ldr	r2, [pc, #84]	; f8 <abort+0xc>
        ldr   r3,=_edata                // -> end of data
      a0:	e59f3054 	ldr	r3, [pc, #84]	; fc <abort+0x10>
1:      cmp   r2,r3                     // check if data to move
      a4:	e1520003 	cmp	r2, r3
        ldrlo r0,[r1],#4                // copy it
      a8:	34910004 	ldrcc	r0, [r1], #4
        strlo r0,[r2],#4
      ac:	34820004 	strcc	r0, [r2], #4
        blo   1b                        // loop until done
      b0:	3afffffb 	bcc	a4 <IRQ_STACK_SIZE+0x24>
#endif
// Clear .bss
// ----------
        mov   r0,#0                     // get a zero
      b4:	e3a00000 	mov	r0, #0
        ldr   r1,=__bss_start           // -> bss start
      b8:	e59f1040 	ldr	r1, [pc, #64]	; 100 <abort+0x14>
        ldr   r2,=__bss_end__           // -> bss end
      bc:	e59f2040 	ldr	r2, [pc, #64]	; 104 <abort+0x18>
2:      cmp   r1,r2                     // check if data to clear
      c0:	e1510002 	cmp	r1, r2
        strlo r0,[r1],#4                // clear 4 bytes
      c4:	34810004 	strcc	r0, [r1], #4
        blo   2b                        // loop until done
      c8:	3afffffc 	bcc	c0 <IRQ_STACK_SIZE+0x40>

// Call main program: main(0)
// --------------------------
        mov   r0,#0                     // no arguments (argc = 0)
      cc:	e3a00000 	mov	r0, #0
        mov   r1,r0
      d0:	e1a01000 	mov	r1, r0
        mov   r2,r0
      d4:	e1a02000 	mov	r2, r0
        mov   fp,r0                     // null frame pointer
      d8:	e1a0b000 	mov	fp, r0
        mov   r7,r0                     // null frame pointer for thumb
      dc:	e1a07000 	mov	r7, r0
        ldr   r10,=main
      e0:	e59fa020 	ldr	sl, [pc, #32]	; 108 <abort+0x1c>
        mov   lr,pc
      e4:	e1a0e00f 	mov	lr, pc
        bx    r10                       // enter main()
      e8:	e12fff1a 	bx	sl

000000ec <abort>:
        ldr   r0,=(1<<23)               // P23
        str   r0,[r1,#PIO_PER_OFF]      // make sure pin is contolled by PIO
        str   r0,[r1,#PIO_CODR_OFF]     // set the pin low
        str   r0,[r1,#PIO_OER_OFF]      // make it an output
#endif
        b     .                         // loop until reset
      ec:	eafffffe 	b	ec <abort>
      f0:	40001314 	.word	0x40001314
      f4:	00001694 	.word	0x00001694
      f8:	40000000 	.word	0x40000000
      fc:	4000009c 	.word	0x4000009c
     100:	4000009c 	.word	0x4000009c
     104:	40000f14 	.word	0x40000f14
     108:	00000b84 	.word	0x00000b84

0000010c <log_char>:

	U0LCR	 = 0x03; // DivisorLatchAccessBit = 0,  UART 8N1, forbid access to divider-latches
}

static void log_char(char c){
	U0THR = c;     // TransmitHoldingRegister , DivisorLatchAccessBit must be 0 to transmit
     10c:	e59f3010 	ldr	r3, [pc, #16]	; 124 <log_char+0x18>
     110:	e5c30000 	strb	r0, [r3]
	while(!(U0LSR & 0x40));
     114:	e5d32014 	ldrb	r2, [r3, #20]
     118:	e3120040 	tst	r2, #64	; 0x40
     11c:	0afffffc 	beq	114 <log_char+0x8>
}
     120:	e12fff1e 	bx	lr
     124:	e000c000 	.word	0xe000c000

00000128 <asm_get_cpsr>:
#include "irq.h"

static inline unsigned asm_get_cpsr(void)
{
  unsigned long retval;
  asm volatile (" mrs  %0, cpsr" : "=r" (retval) : /* no inputs */  );
     128:	e10f0000 	mrs	r0, CPSR
  return retval;
}
     12c:	e12fff1e 	bx	lr

00000130 <asm_set_cpsr>:

static inline void asm_set_cpsr(unsigned val)
{
  asm volatile (" msr  cpsr, %0" : /* no outputs */ : "r" (val)  );
     130:	e129f000 	msr	CPSR_fc, r0
}
     134:	e12fff1e 	bx	lr

00000138 <i2c_read_bytes_isr>:
}

/**
 * i2c interrupt handler
 */
void i2c_read_bytes_isr(void) {
     138:	e92d100f 	push	{r0, r1, r2, r3, ip}
	log_string_i2c(">> read_bytes_isr\n");
	int temp = 0;
	temp = I2C1STAT;
     13c:	e59f3140 	ldr	r3, [pc, #320]	; 284 <i2c_read_bytes_isr+0x14c>
     140:	e5d32004 	ldrb	r2, [r3, #4]
     144:	e20220ff 	and	r2, r2, #255	; 0xff

	switch (temp) {
     148:	e3520028 	cmp	r2, #40	; 0x28
     14c:	0a00001b 	beq	1c0 <i2c_read_bytes_isr+0x88>
     150:	8a000006 	bhi	170 <i2c_read_bytes_isr+0x38>
     154:	e3520010 	cmp	r2, #16
     158:	0a00000f 	beq	19c <i2c_read_bytes_isr+0x64>
     15c:	e3520018 	cmp	r2, #24
     160:	0a000012 	beq	1b0 <i2c_read_bytes_isr+0x78>
     164:	e3520008 	cmp	r2, #8
     168:	1a000040 	bne	270 <i2c_read_bytes_isr+0x138>
     16c:	ea000006 	b	18c <i2c_read_bytes_isr+0x54>
     170:	e3520050 	cmp	r2, #80	; 0x50
     174:	0a000018 	beq	1dc <i2c_read_bytes_isr+0xa4>
     178:	e3520058 	cmp	r2, #88	; 0x58
     17c:	0a00002a 	beq	22c <i2c_read_bytes_isr+0xf4>
     180:	e3520040 	cmp	r2, #64	; 0x40
     184:	1a000039 	bne	270 <i2c_read_bytes_isr+0x138>
     188:	ea00000f 	b	1cc <i2c_read_bytes_isr+0x94>
	case TW_START: // A START condition has been transmitted.
		log_string_i2c("TW_START\n");
		I2C1DAT = (MPU6050_ADDRESS_AD0_LOW << 0x1) | I2C_WRITE; // Slave address + Write
     18c:	e3e0202f 	mvn	r2, #47	; 0x2f
     190:	e5c32008 	strb	r2, [r3, #8]
		I2C1CONCLR = 0x28; // Clear SI and STA flag
     194:	e2822058 	add	r2, r2, #88	; 0x58
     198:	ea000002 	b	1a8 <i2c_read_bytes_isr+0x70>
		break;
	case TW_REP_START: // A repeated START	condition has been transmitted.
		log_string_i2c("TW_REP_START\n");
		I2C1DAT = (MPU6050_ADDRESS_AD0_LOW << 0x1) | I2C_READ; // Slave address + Read
     19c:	e3e0202e 	mvn	r2, #46	; 0x2e
     1a0:	e5c32008 	strb	r2, [r3, #8]
		I2C1CONCLR = 0x28; // Clear SI and STA flag
     1a4:	e2822057 	add	r2, r2, #87	; 0x57
     1a8:	e5c32018 	strb	r2, [r3, #24]
		break;
     1ac:	ea00002f 	b	270 <i2c_read_bytes_isr+0x138>
	case TW_MT_SLA_ACK: // SLA+W has been transmitted; ACK has been received.
		log_string_i2c("TW_MT_SLA_ACK\n");
		I2C1DAT = ra_buff; // Register address to be written
     1b0:	e59f20d0 	ldr	r2, [pc, #208]	; 288 <i2c_read_bytes_isr+0x150>
     1b4:	e5d22000 	ldrb	r2, [r2]
     1b8:	e5c32008 	strb	r2, [r3, #8]
     1bc:	ea000011 	b	208 <i2c_read_bytes_isr+0xd0>
	case TW_MT_SLA_NACK: // SLA+W has been transmitted; NOT ACK has been received.
		log_string_i2c("TW_MT_SLA_NACK\n");
		break;
	case TW_MT_DATA_ACK: // Data byte in I2DAT has been transmitted; ACK has been received.
		log_string_i2c("TW_MT_DATA_ACK\n");
		I2C1CONSET = 0x20; // Transmit start condition
     1c0:	e3a02020 	mov	r2, #32
     1c4:	e5c32000 	strb	r2, [r3]
     1c8:	ea00000e 	b	208 <i2c_read_bytes_isr+0xd0>
		log_string_i2c("TW_MT_ARB_LOST\n");
		break;

	case TW_MR_SLA_ACK: // SLA+R has been transmitted; ACK has been received.
		log_string_i2c("TW_MR_SLA_ACK\n");
		I2C1CONSET = 0x04; // Transmit ACK on data receives
     1cc:	e3a02004 	mov	r2, #4
     1d0:	e5c32000 	strb	r2, [r3]
		I2C1CONCLR = 0x08; // Clear SI
     1d4:	e0822002 	add	r2, r2, r2
     1d8:	eafffff2 	b	1a8 <i2c_read_bytes_isr+0x70>
	case TW_MR_DATA_ACK: // Data byte has been received; ACK has been returned.
		log_string_i2c("TW_MR_DATA_ACK\n");
		log_string_i2c("pos: ");
		log_int_i2c(buff_pos);
		log_string_i2c("\n");
		if ((buff_pos + 2) < buff_size) {
     1dc:	e59f20a4 	ldr	r2, [pc, #164]	; 288 <i2c_read_bytes_isr+0x150>
     1e0:	e5921004 	ldr	r1, [r2, #4]
     1e4:	e5920008 	ldr	r0, [r2, #8]
     1e8:	e281c002 	add	ip, r1, #2
     1ec:	e15c0000 	cmp	ip, r0
     1f0:	aa000006 	bge	210 <i2c_read_bytes_isr+0xd8>
			c_buff[buff_pos++] = I2C1DAT;
     1f4:	e5d3c008 	ldrb	ip, [r3, #8]
     1f8:	e592000c 	ldr	r0, [r2, #12]
     1fc:	e7c0c001 	strb	ip, [r0, r1]
     200:	e2811001 	add	r1, r1, #1
     204:	e5821004 	str	r1, [r2, #4]
			I2C1CONCLR = 0x08; // Clear SI
     208:	e3a02008 	mov	r2, #8
     20c:	eaffffe5 	b	1a8 <i2c_read_bytes_isr+0x70>
		}
		else {
			c_buff[buff_pos++] = I2C1DAT;
     210:	e5d3c008 	ldrb	ip, [r3, #8]
     214:	e592000c 	ldr	r0, [r2, #12]
     218:	e7c0c001 	strb	ip, [r0, r1]
     21c:	e2811001 	add	r1, r1, #1
     220:	e5821004 	str	r1, [r2, #4]
			I2C1CONCLR = 0x0C; // Transmit NACK on next data receive, Clear SI
     224:	e3a0200c 	mov	r2, #12
     228:	eaffffde 	b	1a8 <i2c_read_bytes_isr+0x70>
	case TW_MR_DATA_NACK: // Data byte has been received; NOT ACK has been returned.
		log_string_i2c("TW_MR_DATA_NACK\n");
		log_string_i2c("pos: ");
		log_int_i2c(buff_pos);
		log_string_i2c("\n");
		if (buff_pos < buff_size) {
     22c:	e59f2054 	ldr	r2, [pc, #84]	; 288 <i2c_read_bytes_isr+0x150>
     230:	e5921004 	ldr	r1, [r2, #4]
     234:	e5920008 	ldr	r0, [r2, #8]
     238:	e1510000 	cmp	r1, r0
			c_buff[buff_pos++] = I2C1DAT;
     23c:	b5d30008 	ldrblt	r0, [r3, #8]
     240:	b592300c 	ldrlt	r3, [r2, #12]
     244:	b7c30001 	strblt	r0, [r3, r1]
		}
		I2C1CONSET = 0x10; // Transmit stop condition
     248:	e59f3034 	ldr	r3, [pc, #52]	; 284 <i2c_read_bytes_isr+0x14c>
		log_string_i2c("TW_MR_DATA_NACK\n");
		log_string_i2c("pos: ");
		log_int_i2c(buff_pos);
		log_string_i2c("\n");
		if (buff_pos < buff_size) {
			c_buff[buff_pos++] = I2C1DAT;
     24c:	b2811001 	addlt	r1, r1, #1
     250:	b5821004 	strlt	r1, [r2, #4]
		}
		I2C1CONSET = 0x10; // Transmit stop condition
     254:	e3a02010 	mov	r2, #16
     258:	e5c32000 	strb	r2, [r3]
		I2C1CONCLR = 0x08; // Clear SI
     25c:	e3a02008 	mov	r2, #8
     260:	e5c32018 	strb	r2, [r3, #24]
		busy = 0; // data ready to be returned
     264:	e59f301c 	ldr	r3, [pc, #28]	; 288 <i2c_read_bytes_isr+0x150>
     268:	e3a02000 	mov	r2, #0
     26c:	e5832010 	str	r2, [r3, #16]
	default:
		log_string_i2c("[i2c] default\n");
		break;
	}

	VICVectAddr = 0;
     270:	e3a02000 	mov	r2, #0
     274:	e3e03000 	mvn	r3, #0
     278:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfffff031
}
     27c:	e8bd100f 	pop	{r0, r1, r2, r3, ip}
     280:	e25ef004 	subs	pc, lr, #4
     284:	e005c000 	.word	0xe005c000
     288:	4000009c 	.word	0x4000009c

0000028c <i2c_write_byte_isr>:
}

/**
 * i2c interrupt handler
 */
void i2c_write_byte_isr(void) {
     28c:	e92d000f 	push	{r0, r1, r2, r3}
	log_string_i2c(">> i2c_write_byte_isr\n");
	int temp = 0;
	temp = I2C1STAT;
     290:	e59f30d8 	ldr	r3, [pc, #216]	; 370 <i2c_write_byte_isr+0xe4>
     294:	e5d32004 	ldrb	r2, [r3, #4]
     298:	e20220ff 	and	r2, r2, #255	; 0xff

	switch (temp) {
     29c:	e3520018 	cmp	r2, #24
     2a0:	0a00000c 	beq	2d8 <i2c_write_byte_isr+0x4c>
     2a4:	8a000002 	bhi	2b4 <i2c_write_byte_isr+0x28>
     2a8:	e3520008 	cmp	r2, #8
     2ac:	1a00002a 	bne	35c <i2c_write_byte_isr+0xd0>
     2b0:	ea000004 	b	2c8 <i2c_write_byte_isr+0x3c>
     2b4:	e3520028 	cmp	r2, #40	; 0x28
     2b8:	0a00000c 	beq	2f0 <i2c_write_byte_isr+0x64>
     2bc:	e3520030 	cmp	r2, #48	; 0x30
     2c0:	1a000025 	bne	35c <i2c_write_byte_isr+0xd0>
     2c4:	ea00001c 	b	33c <i2c_write_byte_isr+0xb0>
	case TW_START: // A START condition has been transmitted.
		log_string_i2c("TW_START\n");
		I2C1DAT = (MPU6050_ADDRESS_AD0_LOW << 0x1) | I2C_WRITE; // Slave address + Write
     2c8:	e3e0202f 	mvn	r2, #47	; 0x2f
     2cc:	e5c32008 	strb	r2, [r3, #8]
		I2C1CONCLR = 0x28; // Clear SI and STA flag
     2d0:	e2822058 	add	r2, r2, #88	; 0x58
     2d4:	ea000003 	b	2e8 <i2c_write_byte_isr+0x5c>
	case TW_REP_START: // A repeated START	condition has been transmitted.
		log_string_i2c("TW_REP_START\n");
		break;
	case TW_MT_SLA_ACK: // SLA+W has been transmitted; ACK has been received.
		log_string_i2c("TW_MT_SLA_ACK\n");
		I2C1DAT = ra_buff; // Register address to be written
     2d8:	e59f2094 	ldr	r2, [pc, #148]	; 374 <i2c_write_byte_isr+0xe8>
     2dc:	e5d22000 	ldrb	r2, [r2]
     2e0:	e5c32008 	strb	r2, [r3, #8]
		I2C1CONCLR = 0x08; // Clear SI
     2e4:	e3a02008 	mov	r2, #8
     2e8:	e5c32018 	strb	r2, [r3, #24]
		break;
     2ec:	ea00001a 	b	35c <i2c_write_byte_isr+0xd0>
	case TW_MT_SLA_NACK: // SLA+W has been transmitted; NOT ACK has been received.
		log_string_i2c("TW_MT_SLA_NACK\n");
		break;
	case TW_MT_DATA_ACK: // Data byte in I2DAT has been transmitted; ACK has been received.
		log_string_i2c("TW_MT_DATA_ACK\n");
		if (buff_pos < buff_size) {
     2f0:	e59f207c 	ldr	r2, [pc, #124]	; 374 <i2c_write_byte_isr+0xe8>
     2f4:	e5921004 	ldr	r1, [r2, #4]
     2f8:	e5920008 	ldr	r0, [r2, #8]
     2fc:	e1510000 	cmp	r1, r0
     300:	aa000005 	bge	31c <i2c_write_byte_isr+0x90>
			I2C1DAT = c_buff[buff_pos++]; // Send data
     304:	e592000c 	ldr	r0, [r2, #12]
     308:	e7d00001 	ldrb	r0, [r0, r1]
     30c:	e2811001 	add	r1, r1, #1
     310:	e5c30008 	strb	r0, [r3, #8]
     314:	e5821004 	str	r1, [r2, #4]
     318:	eafffff1 	b	2e4 <i2c_write_byte_isr+0x58>
			I2C1CONCLR = 0x08; // Clear SI
		} else {
			I2C1CONSET |= 0x01 << 4; // Transmit stop condition
     31c:	e5d31000 	ldrb	r1, [r3]
     320:	e3811010 	orr	r1, r1, #16
     324:	e5c31000 	strb	r1, [r3]
			I2C1CONCLR = 0x08; // Clear SI
     328:	e3a01008 	mov	r1, #8
     32c:	e5c31018 	strb	r1, [r3, #24]
			busy = 0; // done
     330:	e3a03000 	mov	r3, #0
     334:	e5823010 	str	r3, [r2, #16]
     338:	ea000007 	b	35c <i2c_write_byte_isr+0xd0>
		}
		break;
	case TW_MT_DATA_NACK: // Data byte in I2DAT has been transmitted; NOT ACK has been received.
		log_string_i2c("TW_MT_DATA_NACK\n");
		I2C1CONSET |= 0x01 << 4; // Transmit stop condition
     33c:	e5d32000 	ldrb	r2, [r3]
     340:	e3822010 	orr	r2, r2, #16
     344:	e5c32000 	strb	r2, [r3]
		I2C1CONCLR = 0x08; // Clear SI
     348:	e3a02008 	mov	r2, #8
     34c:	e5c32018 	strb	r2, [r3, #24]
		busy = 0; // done
     350:	e59f301c 	ldr	r3, [pc, #28]	; 374 <i2c_write_byte_isr+0xe8>
     354:	e3a02000 	mov	r2, #0
     358:	e5832010 	str	r2, [r3, #16]
	default:
		log_string_i2c("default\n");
		break;
	}

	VICVectAddr = 0;
     35c:	e3a02000 	mov	r2, #0
     360:	e3e03000 	mvn	r3, #0
     364:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfffff031
}
     368:	e8bd000f 	pop	{r0, r1, r2, r3}
     36c:	e25ef004 	subs	pc, lr, #4
     370:	e005c000 	.word	0xe005c000
     374:	4000009c 	.word	0x4000009c

00000378 <imu_data_ready>:
}

/**
 * Read IMU data when triggered by EINT2
 */
void imu_data_ready(void) {
     378:	e92d000c 	push	{r2, r3}

	//log_string_debug(">> imu_data_ready\n");

	imu_data_available = 1;
     37c:	e59f3028 	ldr	r3, [pc, #40]	; 3ac <imu_data_ready+0x34>
     380:	e3a02001 	mov	r2, #1
     384:	e5c32014 	strb	r2, [r3, #20]

	EXTINT |= 0x1 << 2; // reset EINT2
     388:	e59f3020 	ldr	r3, [pc, #32]	; 3b0 <imu_data_ready+0x38>
     38c:	e5d32040 	ldrb	r2, [r3, #64]	; 0x40
     390:	e3822004 	orr	r2, r2, #4
     394:	e5c32040 	strb	r2, [r3, #64]	; 0x40

	//log_string_debug("<< imu_data_ready\n");

	VICVectAddr = 0;
     398:	e3a02000 	mov	r2, #0
     39c:	e3e03000 	mvn	r3, #0
     3a0:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfffff031
}
     3a4:	e8bd000c 	pop	{r2, r3}
     3a8:	e25ef004 	subs	pc, lr, #4
     3ac:	4000009c 	.word	0x4000009c
     3b0:	e01fc100 	.word	0xe01fc100

000003b4 <error>:
/**
 *
 */
void error(void){
	log_string_error("irq error");
}
     3b4:	e25ef004 	subs	pc, lr, #4

000003b8 <logger_init>:
 * ou UARTn_baudrate = PCLK / ( 16 * ( 256 * UnDLM + UnDLL))
 * 115131 = 15MHz / ( 16 * ( 256*0 + 6) * ( 1 + 5/14) )
 * 115200 = 14.7456MHz / ( 16 * ( 256*0 + 8) )
 */
void logger_init(void){ // using UART0
	PINSEL0 |= 0x05; // Set the pins function
     3b8:	e59f3050 	ldr	r3, [pc, #80]	; 410 <STACK_SIZE+0x10>
     3bc:	e5932000 	ldr	r2, [r3]
     3c0:	e3822005 	orr	r2, r2, #5
     3c4:	e5832000 	str	r2, [r3]
	U0FCR    = 0x07; // FIFOControlRegister, Tx, Rx FIFO Reset and FIFO enable
     3c8:	e2433802 	sub	r3, r3, #131072	; 0x20000
     3cc:	e3a02007 	mov	r2, #7
     3d0:	e5c32008 	strb	r2, [r3, #8]
	U0LCR 	 = 0x83; // DivisorLatchAccessBit = 1,  UART 8N1, allow access to divider-latches
     3d4:	e3e0207c 	mvn	r2, #124	; 0x7c
     3d8:	e5c3200c 	strb	r2, [r3, #12]

#ifdef CRYSTAL12MHz
	U0DLL	 = 0x06; // DivisorLatchLow bit
     3dc:	e2822083 	add	r2, r2, #131	; 0x83
     3e0:	e5c32000 	strb	r2, [r3]
	U0DLM	 = 0x00; // DivisorLatchHigh bit
     3e4:	e3a02000 	mov	r2, #0
     3e8:	e5c32004 	strb	r2, [r3, #4]
	U0FDR	|= 0x05; // DivAddVal
     3ec:	e5d32028 	ldrb	r2, [r3, #40]	; 0x28
     3f0:	e3822005 	orr	r2, r2, #5
     3f4:	e5c32028 	strb	r2, [r3, #40]	; 0x28
	U0FDR	|= 0x0E << 4; // MulVal = 14
     3f8:	e5d32028 	ldrb	r2, [r3, #40]	; 0x28
     3fc:	e38220e0 	orr	r2, r2, #224	; 0xe0
     400:	e5c32028 	strb	r2, [r3, #40]	; 0x28
#ifdef CRYSTAL14745600Hz
	U0DLL	 = 0x08; // DivisorLatchLow bit
	U0DLM	 = 0x00; // DivisorLatchHigh bit
#endif

	U0LCR	 = 0x03; // DivisorLatchAccessBit = 0,  UART 8N1, forbid access to divider-latches
     404:	e3a02003 	mov	r2, #3
     408:	e5c3200c 	strb	r2, [r3, #12]
}
     40c:	e12fff1e 	bx	lr
     410:	e002c000 	.word	0xe002c000

00000414 <log_int>:
static void log_char(char c){
	U0THR = c;     // TransmitHoldingRegister , DivisorLatchAccessBit must be 0 to transmit
	while(!(U0LSR & 0x40));
}

void log_int(int num){
     414:	e92d4070 	push	{r4, r5, r6, lr}
	if(num & 0x80000000){ // se for negativo
     418:	e2504000 	subs	r4, r0, #0
     41c:	aa000003 	bge	430 <log_int+0x1c>
		log_char('-');
     420:	e3a0002d 	mov	r0, #45	; 0x2d
     424:	ebffff38 	bl	10c <log_char>
		num = ~num;
		num += 0x1;
     428:	e2644000 	rsb	r4, r4, #0
     42c:	ea000001 	b	438 <log_int+0x24>
	}else
		log_char(' ');
     430:	e3a00020 	mov	r0, #32
     434:	ebffff34 	bl	10c <log_char>
	log_char(ascii[num >> 28]);
     438:	e59f5074 	ldr	r5, [pc, #116]	; 4b4 <log_int+0xa0>
     43c:	e7d50e44 	ldrb	r0, [r5, r4, asr #28]
     440:	ebffff31 	bl	10c <log_char>
	log_char(ascii[num >> 24 & 0x0000000f]);
     444:	e1a03c44 	asr	r3, r4, #24
     448:	e203300f 	and	r3, r3, #15
     44c:	e7d50003 	ldrb	r0, [r5, r3]
     450:	ebffff2d 	bl	10c <log_char>
	log_char(ascii[num >> 20 & 0x0000000f]);
     454:	e1a03a44 	asr	r3, r4, #20
     458:	e203300f 	and	r3, r3, #15
     45c:	e7d50003 	ldrb	r0, [r5, r3]
     460:	ebffff29 	bl	10c <log_char>
	log_char(ascii[num >> 16 & 0x0000000f]);
     464:	e1a03844 	asr	r3, r4, #16
     468:	e203300f 	and	r3, r3, #15
     46c:	e7d50003 	ldrb	r0, [r5, r3]
     470:	ebffff25 	bl	10c <log_char>
	log_char(ascii[num >> 12 & 0x0000000f]);
     474:	e1a03644 	asr	r3, r4, #12
     478:	e203300f 	and	r3, r3, #15
     47c:	e7d50003 	ldrb	r0, [r5, r3]
     480:	ebffff21 	bl	10c <log_char>
	log_char(ascii[num >> 8 & 0x0000000f]);
     484:	e1a03444 	asr	r3, r4, #8
     488:	e203300f 	and	r3, r3, #15
     48c:	e7d50003 	ldrb	r0, [r5, r3]
     490:	ebffff1d 	bl	10c <log_char>
	log_char(ascii[num >> 4 & 0x0000000f]);
     494:	e1a03244 	asr	r3, r4, #4
     498:	e203300f 	and	r3, r3, #15
     49c:	e7d50003 	ldrb	r0, [r5, r3]
     4a0:	ebffff19 	bl	10c <log_char>
	log_char(ascii[num & 0x0000000f]);
     4a4:	e204400f 	and	r4, r4, #15
     4a8:	e7d50004 	ldrb	r0, [r5, r4]
}
     4ac:	e8bd4070 	pop	{r4, r5, r6, lr}
	log_char(ascii[num >> 20 & 0x0000000f]);
	log_char(ascii[num >> 16 & 0x0000000f]);
	log_char(ascii[num >> 12 & 0x0000000f]);
	log_char(ascii[num >> 8 & 0x0000000f]);
	log_char(ascii[num >> 4 & 0x0000000f]);
	log_char(ascii[num & 0x0000000f]);
     4b0:	eaffff15 	b	10c <log_char>
     4b4:	00001484 	.word	0x00001484

000004b8 <log_short>:
}

void log_short(short num){
     4b8:	e92d4070 	push	{r4, r5, r6, lr}
	if(num & 0x8000){ // se for negativo
     4bc:	e2504000 	subs	r4, r0, #0
     4c0:	aa000005 	bge	4dc <log_short+0x24>
		log_char('-');
		num = ~num;
		num++;
     4c4:	e2644000 	rsb	r4, r4, #0
	log_char(ascii[num & 0x0000000f]);
}

void log_short(short num){
	if(num & 0x8000){ // se for negativo
		log_char('-');
     4c8:	e3a0002d 	mov	r0, #45	; 0x2d
		num = ~num;
		num++;
     4cc:	e1a04804 	lsl	r4, r4, #16
	log_char(ascii[num & 0x0000000f]);
}

void log_short(short num){
	if(num & 0x8000){ // se for negativo
		log_char('-');
     4d0:	ebffff0d 	bl	10c <log_char>
		num = ~num;
		num++;
     4d4:	e1a04844 	asr	r4, r4, #16
     4d8:	ea000001 	b	4e4 <log_short+0x2c>
	}else
		log_char(' ');
     4dc:	e3a00020 	mov	r0, #32
     4e0:	ebffff09 	bl	10c <log_char>
	log_char(ascii[num >> 12]);
     4e4:	e59f5034 	ldr	r5, [pc, #52]	; 520 <log_short+0x68>
     4e8:	e7d50644 	ldrb	r0, [r5, r4, asr #12]
     4ec:	ebffff06 	bl	10c <log_char>
	log_char(ascii[num >> 8 & 0x000f]);
     4f0:	e1a03424 	lsr	r3, r4, #8
     4f4:	e203300f 	and	r3, r3, #15
     4f8:	e7d50003 	ldrb	r0, [r5, r3]
     4fc:	ebffff02 	bl	10c <log_char>
	log_char(ascii[num >> 4 & 0x000f]);
     500:	e1a03224 	lsr	r3, r4, #4
     504:	e203300f 	and	r3, r3, #15
     508:	e7d50003 	ldrb	r0, [r5, r3]
     50c:	ebfffefe 	bl	10c <log_char>
	log_char(ascii[num & 0x000f]);
     510:	e204400f 	and	r4, r4, #15
     514:	e7d50004 	ldrb	r0, [r5, r4]
}
     518:	e8bd4070 	pop	{r4, r5, r6, lr}
	}else
		log_char(' ');
	log_char(ascii[num >> 12]);
	log_char(ascii[num >> 8 & 0x000f]);
	log_char(ascii[num >> 4 & 0x000f]);
	log_char(ascii[num & 0x000f]);
     51c:	eafffefa 	b	10c <log_char>
     520:	00001484 	.word	0x00001484

00000524 <log_string>:
}

void log_string(const char *s){
     524:	e92d4010 	push	{r4, lr}
     528:	e1a04000 	mov	r4, r0
	while(*s){
     52c:	ea000004 	b	544 <log_string+0x20>
		if(*s == '\n')
     530:	e353000a 	cmp	r3, #10
			log_char('\r'); // \n + \r = new line
     534:	03a0000d 	moveq	r0, #13
     538:	0bfffef3 	bleq	10c <log_char>
		log_char(*s);
     53c:	e5540001 	ldrb	r0, [r4, #-1]
     540:	ebfffef1 	bl	10c <log_char>
	log_char(ascii[num >> 4 & 0x000f]);
	log_char(ascii[num & 0x000f]);
}

void log_string(const char *s){
	while(*s){
     544:	e4d43001 	ldrb	r3, [r4], #1
     548:	e3530000 	cmp	r3, #0
     54c:	1afffff7 	bne	530 <log_string+0xc>
		if(*s == '\n')
			log_char('\r'); // \n + \r = new line
		log_char(*s);
		s++;
	}
}
     550:	e8bd4010 	pop	{r4, lr}
     554:	e12fff1e 	bx	lr

00000558 <log_byte>:

void log_byte(char c){
	if(c & 0x80){ // se for negativo
     558:	e3100080 	tst	r0, #128	; 0x80
		log_char(*s);
		s++;
	}
}

void log_byte(char c){
     55c:	e92d4070 	push	{r4, r5, r6, lr}
     560:	e1a04000 	mov	r4, r0
	if(c & 0x80){ // se for negativo
     564:	0a000004 	beq	57c <log_byte+0x24>
		log_char('-');
     568:	e3a0002d 	mov	r0, #45	; 0x2d
		c = ~c;
		c++;
     56c:	e2644000 	rsb	r4, r4, #0
	}
}

void log_byte(char c){
	if(c & 0x80){ // se for negativo
		log_char('-');
     570:	ebfffee5 	bl	10c <log_char>
		c = ~c;
		c++;
     574:	e20440ff 	and	r4, r4, #255	; 0xff
     578:	ea000001 	b	584 <log_byte+0x2c>
	}else
		log_char(' ');
     57c:	e3a00020 	mov	r0, #32
     580:	ebfffee1 	bl	10c <log_char>
	log_char(ascii[c >> 4]);
     584:	e59f5014 	ldr	r5, [pc, #20]	; 5a0 <log_byte+0x48>
     588:	e7d50224 	ldrb	r0, [r5, r4, lsr #4]
     58c:	ebfffede 	bl	10c <log_char>
	log_char(ascii[c & 0x000f]);
     590:	e204400f 	and	r4, r4, #15
     594:	e7d50004 	ldrb	r0, [r5, r4]
}
     598:	e8bd4070 	pop	{r4, r5, r6, lr}
		c = ~c;
		c++;
	}else
		log_char(' ');
	log_char(ascii[c >> 4]);
	log_char(ascii[c & 0x000f]);
     59c:	eafffeda 	b	10c <log_char>
     5a0:	00001484 	.word	0x00001484

000005a4 <log2bytes>:
}

void log2bytes(short c){
     5a4:	e92d4070 	push	{r4, r5, r6, lr}
	if(c & 0x8000){ // se for negativo
     5a8:	e2504000 	subs	r4, r0, #0
     5ac:	aa000005 	bge	5c8 <log2bytes+0x24>
		log_char('-');
		c = ~c;
		c++;
     5b0:	e2644000 	rsb	r4, r4, #0
	log_char(ascii[c & 0x000f]);
}

void log2bytes(short c){
	if(c & 0x8000){ // se for negativo
		log_char('-');
     5b4:	e3a0002d 	mov	r0, #45	; 0x2d
		c = ~c;
		c++;
     5b8:	e1a04804 	lsl	r4, r4, #16
	log_char(ascii[c & 0x000f]);
}

void log2bytes(short c){
	if(c & 0x8000){ // se for negativo
		log_char('-');
     5bc:	ebfffed2 	bl	10c <log_char>
		c = ~c;
		c++;
     5c0:	e1a04844 	asr	r4, r4, #16
     5c4:	ea000001 	b	5d0 <log2bytes+0x2c>
	}else
		log_char(' ');
     5c8:	e3a00020 	mov	r0, #32
     5cc:	ebfffece 	bl	10c <log_char>
	log_char(ascii[c >> 12]);
     5d0:	e59f5034 	ldr	r5, [pc, #52]	; 60c <log2bytes+0x68>
     5d4:	e7d50644 	ldrb	r0, [r5, r4, asr #12]
     5d8:	ebfffecb 	bl	10c <log_char>
	log_char(ascii[c >> 8 & 0x000f]);
     5dc:	e1a03424 	lsr	r3, r4, #8
     5e0:	e203300f 	and	r3, r3, #15
     5e4:	e7d50003 	ldrb	r0, [r5, r3]
     5e8:	ebfffec7 	bl	10c <log_char>
	log_char(ascii[c >> 4 & 0x000f]);
     5ec:	e1a03224 	lsr	r3, r4, #4
     5f0:	e203300f 	and	r3, r3, #15
     5f4:	e7d50003 	ldrb	r0, [r5, r3]
     5f8:	ebfffec3 	bl	10c <log_char>
	log_char(ascii[c & 0x000f]);
     5fc:	e204400f 	and	r4, r4, #15
     600:	e7d50004 	ldrb	r0, [r5, r4]
}
     604:	e8bd4070 	pop	{r4, r5, r6, lr}
	}else
		log_char(' ');
	log_char(ascii[c >> 12]);
	log_char(ascii[c >> 8 & 0x000f]);
	log_char(ascii[c >> 4 & 0x000f]);
	log_char(ascii[c & 0x000f]);
     608:	eafffebf 	b	10c <log_char>
     60c:	00001484 	.word	0x00001484

00000610 <log4bytes>:
}

void log4bytes(int c){
     610:	e92d4070 	push	{r4, r5, r6, lr}
	if(c & 0x80000000){ // se for negativo
     614:	e2504000 	subs	r4, r0, #0
     618:	aa000003 	bge	62c <log4bytes+0x1c>
		log_char('-');
     61c:	e3a0002d 	mov	r0, #45	; 0x2d
     620:	ebfffeb9 	bl	10c <log_char>
		c = ~c;
		c += 0x1;
     624:	e2644000 	rsb	r4, r4, #0
     628:	ea000001 	b	634 <log4bytes+0x24>
	}else
		log_char(' ');
     62c:	e3a00020 	mov	r0, #32
     630:	ebfffeb5 	bl	10c <log_char>
	log_char(ascii[c >> 28]);
     634:	e59f5074 	ldr	r5, [pc, #116]	; 6b0 <log4bytes+0xa0>
     638:	e7d50e44 	ldrb	r0, [r5, r4, asr #28]
     63c:	ebfffeb2 	bl	10c <log_char>
	log_char(ascii[c >> 24 & 0x0000000f]);
     640:	e1a03c44 	asr	r3, r4, #24
     644:	e203300f 	and	r3, r3, #15
     648:	e7d50003 	ldrb	r0, [r5, r3]
     64c:	ebfffeae 	bl	10c <log_char>
	log_char(ascii[c >> 20 & 0x0000000f]);
     650:	e1a03a44 	asr	r3, r4, #20
     654:	e203300f 	and	r3, r3, #15
     658:	e7d50003 	ldrb	r0, [r5, r3]
     65c:	ebfffeaa 	bl	10c <log_char>
	log_char(ascii[c >> 16 & 0x0000000f]);
     660:	e1a03844 	asr	r3, r4, #16
     664:	e203300f 	and	r3, r3, #15
     668:	e7d50003 	ldrb	r0, [r5, r3]
     66c:	ebfffea6 	bl	10c <log_char>
	log_char(ascii[c >> 12 & 0x0000000f]);
     670:	e1a03644 	asr	r3, r4, #12
     674:	e203300f 	and	r3, r3, #15
     678:	e7d50003 	ldrb	r0, [r5, r3]
     67c:	ebfffea2 	bl	10c <log_char>
	log_char(ascii[c >> 8 & 0x0000000f]);
     680:	e1a03444 	asr	r3, r4, #8
     684:	e203300f 	and	r3, r3, #15
     688:	e7d50003 	ldrb	r0, [r5, r3]
     68c:	ebfffe9e 	bl	10c <log_char>
	log_char(ascii[c >> 4 & 0x0000000f]);
     690:	e1a03244 	asr	r3, r4, #4
     694:	e203300f 	and	r3, r3, #15
     698:	e7d50003 	ldrb	r0, [r5, r3]
     69c:	ebfffe9a 	bl	10c <log_char>
	log_char(ascii[c & 0x0000000f]);
     6a0:	e204400f 	and	r4, r4, #15
     6a4:	e7d50004 	ldrb	r0, [r5, r4]
}
     6a8:	e8bd4070 	pop	{r4, r5, r6, lr}
	log_char(ascii[c >> 20 & 0x0000000f]);
	log_char(ascii[c >> 16 & 0x0000000f]);
	log_char(ascii[c >> 12 & 0x0000000f]);
	log_char(ascii[c >> 8 & 0x0000000f]);
	log_char(ascii[c >> 4 & 0x0000000f]);
	log_char(ascii[c & 0x0000000f]);
     6ac:	eafffe96 	b	10c <log_char>
     6b0:	00001484 	.word	0x00001484

000006b4 <i2c_init>:
void i2c_init(void){

	log_string_i2c(">> i2c_init\n");

	// Set the pin function
	PINSEL1 |= 0x1 << 2; // SCL1
     6b4:	e59f3054 	ldr	r3, [pc, #84]	; 710 <i2c_init+0x5c>
     6b8:	e5932004 	ldr	r2, [r3, #4]
     6bc:	e3822004 	orr	r2, r2, #4
     6c0:	e5832004 	str	r2, [r3, #4]
	PINSEL1 |= 0x1 << 4; // SDA1
     6c4:	e5932004 	ldr	r2, [r3, #4]
     6c8:	e3822010 	orr	r2, r2, #16
     6cc:	e5832004 	str	r2, [r3, #4]

	I2C1CONCLR = 0x6C; // clear all flags
     6d0:	e2833803 	add	r3, r3, #196608	; 0x30000
     6d4:	e3a0206c 	mov	r2, #108	; 0x6c
     6d8:	e5c32018 	strb	r2, [r3, #24]
	I2C1CONSET |= 0x1 << 6; // enable i2c1
     6dc:	e5d32000 	ldrb	r2, [r3]
     6e0:	e3822040 	orr	r2, r2, #64	; 0x40
     6e4:	e5c32000 	strb	r2, [r3]
	I2C1SCLH = 19; // Set the bit rate:
     6e8:	e3a02013 	mov	r2, #19
     6ec:	e1c321b0 	strh	r2, [r3, #16]
	I2C1SCLL = 19; // 394.7kHz for pclk=15MHz | 388.0kHz for pclk=14.7456MHz
     6f0:	e1c321b4 	strh	r2, [r3, #20]

	// Enable the interrupts
	VICVectCntl0 = 0x33; //Vectored Interrupt slot enabled with source #19 (I2C1)
     6f4:	e3e03000 	mvn	r3, #0
     6f8:	e2822020 	add	r2, r2, #32
     6fc:	e5032dff 	str	r2, [r3, #-3583]	; 0xfffff201
	VICIntEnable |= 0x1 << 19; //source #19 enabled as FIQ or IRQ
     700:	e5132fef 	ldr	r2, [r3, #-4079]	; 0xfffff011
     704:	e3822702 	orr	r2, r2, #524288	; 0x80000
     708:	e5032fef 	str	r2, [r3, #-4079]	; 0xfffff011

	log_string_i2c("<< i2c_init\n");
}
     70c:	e12fff1e 	bx	lr
     710:	e002c000 	.word	0xe002c000

00000714 <i2c_read_bytes>:
}

int i2c_read_bytes(char reg_addr, char length, char* data) {
	log_string_i2c(">> read_bytes\n");

	buff_size = length;
     714:	e59f3044 	ldr	r3, [pc, #68]	; 760 <i2c_read_bytes+0x4c>
     718:	e5831008 	str	r1, [r3, #8]
	buff_pos = 0;
     71c:	e3a01000 	mov	r1, #0
     720:	e5831004 	str	r1, [r3, #4]
	ra_buff = reg_addr;
	c_buff = data;
     724:	e583200c 	str	r2, [r3, #12]

	busy = 1;

	//Setting the interrupt handler location for write byte
	VICVectAddr0 = (unsigned int) &i2c_read_bytes_isr;
     728:	e59f1034 	ldr	r1, [pc, #52]	; 764 <i2c_read_bytes+0x50>
	buff_size = length;
	buff_pos = 0;
	ra_buff = reg_addr;
	c_buff = data;

	busy = 1;
     72c:	e3a02001 	mov	r2, #1
     730:	e5832010 	str	r2, [r3, #16]

	//Setting the interrupt handler location for write byte
	VICVectAddr0 = (unsigned int) &i2c_read_bytes_isr;
     734:	e3e02000 	mvn	r2, #0
int i2c_read_bytes(char reg_addr, char length, char* data) {
	log_string_i2c(">> read_bytes\n");

	buff_size = length;
	buff_pos = 0;
	ra_buff = reg_addr;
     738:	e5c30000 	strb	r0, [r3]
	c_buff = data;

	busy = 1;

	//Setting the interrupt handler location for write byte
	VICVectAddr0 = (unsigned int) &i2c_read_bytes_isr;
     73c:	e5021eff 	str	r1, [r2, #-3839]	; 0xfffff101
	// Send Start bit
	I2C1CONSET = 0x20; // Transmit start condition
     740:	e59f2020 	ldr	r2, [pc, #32]	; 768 <i2c_read_bytes+0x54>
     744:	e3a01020 	mov	r1, #32
     748:	e5c21000 	strb	r1, [r2]

	log_string_i2c("waiting\n");

	while (busy); // busy wait for read process
     74c:	e5932010 	ldr	r2, [r3, #16]
     750:	e3520000 	cmp	r2, #0
     754:	1afffffc 	bne	74c <i2c_read_bytes+0x38>

	log_string_i2c("<< read_bytes\n");
	return 1;
}
     758:	e3a00001 	mov	r0, #1
     75c:	e12fff1e 	bx	lr
     760:	4000009c 	.word	0x4000009c
     764:	00000138 	.word	0x00000138
     768:	e005c000 	.word	0xe005c000

0000076c <i2c_read_byte>:
	VICIntEnable |= 0x1 << 19; //source #19 enabled as FIQ or IRQ

	log_string_i2c("<< i2c_init\n");
}

int i2c_read_byte(char reg_addr, char* data) {
     76c:	e1a02001 	mov	r2, r1
	log_string_i2c("read_byte\n");

	int i = i2c_read_bytes(reg_addr,1,data);
     770:	e3a01001 	mov	r1, #1
     774:	eaffffe6 	b	714 <i2c_read_bytes>

00000778 <i2c_write_byte>:
	c |= data; // combine data with existing byte

	return i2c_write_byte(reg_addr, c);
}

int i2c_write_byte(char reg_addr, char data) {
     778:	e24dd008 	sub	sp, sp, #8
	log_string_i2c("write_byte\n");

	buff_size = 1;
     77c:	e59f2050 	ldr	r2, [pc, #80]	; 7d4 <i2c_write_byte+0x5c>
	c |= data; // combine data with existing byte

	return i2c_write_byte(reg_addr, c);
}

int i2c_write_byte(char reg_addr, char data) {
     780:	e28d3008 	add	r3, sp, #8
     784:	e5631001 	strb	r1, [r3, #-1]!
	log_string_i2c("write_byte\n");

	buff_size = 1;
     788:	e3a01001 	mov	r1, #1
     78c:	e5821008 	str	r1, [r2, #8]
	buff_pos = 0;
	ra_buff = reg_addr;
	c_buff = &data;

	busy = 1;
     790:	e5821010 	str	r1, [r2, #16]

	//Setting the interrupt handler location for write byte
	VICVectAddr0 = (unsigned int) &i2c_write_byte_isr;
     794:	e59f103c 	ldr	r1, [pc, #60]	; 7d8 <i2c_write_byte+0x60>
	log_string_i2c("write_byte\n");

	buff_size = 1;
	buff_pos = 0;
	ra_buff = reg_addr;
	c_buff = &data;
     798:	e582300c 	str	r3, [r2, #12]

int i2c_write_byte(char reg_addr, char data) {
	log_string_i2c("write_byte\n");

	buff_size = 1;
	buff_pos = 0;
     79c:	e3a0c000 	mov	ip, #0
	c_buff = &data;

	busy = 1;

	//Setting the interrupt handler location for write byte
	VICVectAddr0 = (unsigned int) &i2c_write_byte_isr;
     7a0:	e3e03000 	mvn	r3, #0

int i2c_write_byte(char reg_addr, char data) {
	log_string_i2c("write_byte\n");

	buff_size = 1;
	buff_pos = 0;
     7a4:	e582c004 	str	ip, [r2, #4]
	ra_buff = reg_addr;
     7a8:	e5c20000 	strb	r0, [r2]
	c_buff = &data;

	busy = 1;

	//Setting the interrupt handler location for write byte
	VICVectAddr0 = (unsigned int) &i2c_write_byte_isr;
     7ac:	e5031eff 	str	r1, [r3, #-3839]	; 0xfffff101
	// Send Start bit
	I2C1CONSET = 0x20; // Transmit start condition
     7b0:	e59f3024 	ldr	r3, [pc, #36]	; 7dc <i2c_write_byte+0x64>
     7b4:	e3a01020 	mov	r1, #32
     7b8:	e5c31000 	strb	r1, [r3]

	while (busy); // busy wait for read process
     7bc:	e5923010 	ldr	r3, [r2, #16]
     7c0:	e3530000 	cmp	r3, #0
     7c4:	1afffffc 	bne	7bc <i2c_write_byte+0x44>

	log_string_i2c("write_byte..returning\n");
	return 1;
}
     7c8:	e3a00001 	mov	r0, #1
     7cc:	e28dd008 	add	sp, sp, #8
     7d0:	e12fff1e 	bx	lr
     7d4:	4000009c 	.word	0x4000009c
     7d8:	0000028c 	.word	0x0000028c
     7dc:	e005c000 	.word	0xe005c000

000007e0 <i2c_write_bits>:
	}

	VICVectAddr = 0;
}

int i2c_write_bits(char reg_addr, char bit, char length, char data){
     7e0:	e92d40f7 	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     7e4:	e1a05001 	mov	r5, r1
	// 10101111 original value (sample)
	// 10100011 original & ~mask
	// 10101011 masked | value

	char c;
	i2c_read_byte(reg_addr, &c);
     7e8:	e28d1007 	add	r1, sp, #7
	}

	VICVectAddr = 0;
}

int i2c_write_bits(char reg_addr, char bit, char length, char data){
     7ec:	e1a06002 	mov	r6, r2
     7f0:	e1a04000 	mov	r4, r0
     7f4:	e1a07003 	mov	r7, r3
	// 10100011 original & ~mask
	// 10101011 masked | value

	char c;
	i2c_read_byte(reg_addr, &c);
	char mask = ((1 << length) - 1) << (bit - length + 1);
     7f8:	e2855001 	add	r5, r5, #1
	// 10101111 original value (sample)
	// 10100011 original & ~mask
	// 10101011 masked | value

	char c;
	i2c_read_byte(reg_addr, &c);
     7fc:	ebffffda 	bl	76c <i2c_read_byte>
	char mask = ((1 << length) - 1) << (bit - length + 1);
     800:	e3e03000 	mvn	r3, #0
     804:	e0665005 	rsb	r5, r6, r5
     808:	e1e06613 	mvn	r6, r3, lsl r6
     80c:	e1a06516 	lsl	r6, r6, r5
     810:	e20660ff 	and	r6, r6, #255	; 0xff
	data <<= (bit - length + 1); // shift data into correct position
	data &= mask; // zero all non-important bits in data
     814:	e0067517 	and	r7, r6, r7, lsl r5
	c &= ~(mask); // zero all important bits in existing byte
     818:	e5dd1007 	ldrb	r1, [sp, #7]
     81c:	e1c11006 	bic	r1, r1, r6
	c |= data; // combine data with existing byte
     820:	e1811007 	orr	r1, r1, r7

	return i2c_write_byte(reg_addr, c);
     824:	e1a00004 	mov	r0, r4
	i2c_read_byte(reg_addr, &c);
	char mask = ((1 << length) - 1) << (bit - length + 1);
	data <<= (bit - length + 1); // shift data into correct position
	data &= mask; // zero all non-important bits in data
	c &= ~(mask); // zero all important bits in existing byte
	c |= data; // combine data with existing byte
     828:	e5cd1007 	strb	r1, [sp, #7]

	return i2c_write_byte(reg_addr, c);
     82c:	ebffffd1 	bl	778 <i2c_write_byte>
}
     830:	e8bd40fe 	pop	{r1, r2, r3, r4, r5, r6, r7, lr}
     834:	e12fff1e 	bx	lr

00000838 <mpu_set_clock_source>:
* @see getClockSource()
* @see MPU6050_RA_PWR_MGMT_1
* @see MPU6050_PWR1_CLKSEL_BIT
* @see MPU6050_PWR1_CLKSEL_LENGTH
*/
void mpu_set_clock_source(char source) {
     838:	e1a03000 	mov	r3, r0
    i2c_write_bits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
     83c:	e3a01002 	mov	r1, #2
     840:	e3a0006b 	mov	r0, #107	; 0x6b
     844:	e3a02003 	mov	r2, #3
     848:	eaffffe4 	b	7e0 <i2c_write_bits>

0000084c <mpu_set_full_scale_gyro_range>:
* @see MPU6050_GYRO_FS_250
* @see MPU6050_RA_GYRO_CONFIG
* @see MPU6050_GCONFIG_FS_SEL_BIT
* @see MPU6050_GCONFIG_FS_SEL_LENGTH
*/
void mpu_set_full_scale_gyro_range(char range) {
     84c:	e1a03000 	mov	r3, r0
	i2c_write_bits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
     850:	e3a01004 	mov	r1, #4
     854:	e3a0001b 	mov	r0, #27
     858:	e3a02002 	mov	r2, #2
     85c:	eaffffdf 	b	7e0 <i2c_write_bits>

00000860 <mpu_set_full_scale_accel_range>:

/** Set full-scale accelerometer range.
* @param range New full-scale accelerometer range setting
* @see getFullScaleAccelRange()
*/
void mpu_set_full_scale_accel_range(char range) {
     860:	e1a03000 	mov	r3, r0
	i2c_write_bits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
     864:	e3a01004 	mov	r1, #4
     868:	e3a0001c 	mov	r0, #28
     86c:	e3a02002 	mov	r2, #2
     870:	eaffffda 	b	7e0 <i2c_write_bits>

00000874 <mpu_set_sleep_enable>:
* @see getSleepEnabled()
* @see MPU6050_RA_PWR_MGMT_1
* @see MPU6050_PWR1_SLEEP_BIT
*/
void mpu_set_sleep_enable(int enable) {
	i2c_write_bits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, 1, enable);
     874:	e20030ff 	and	r3, r0, #255	; 0xff
     878:	e3a01006 	mov	r1, #6
     87c:	e3a0006b 	mov	r0, #107	; 0x6b
     880:	e3a02001 	mov	r2, #1
     884:	eaffffd5 	b	7e0 <i2c_write_bits>

00000888 <mpu_set_temperature_sensor_enabled>:
 * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
 * bit automatically clears to 0 after the reset has been triggered.
 * @param enabled 1 enabled; 0 disabled
 */
void mpu_set_temperature_sensor_enabled(char enabled) {
	i2c_write_bits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_TEMP_DIS_BIT, 1, 1-enabled);
     888:	e2603001 	rsb	r3, r0, #1
     88c:	e20330ff 	and	r3, r3, #255	; 0xff
     890:	e3a0006b 	mov	r0, #107	; 0x6b
     894:	e3a01003 	mov	r1, #3
     898:	e3a02001 	mov	r2, #1
     89c:	eaffffcf 	b	7e0 <i2c_write_bits>

000008a0 <mpu_set_gyro_rate>:
*
* @param rate New sample rate divider
* @see getRate()
* @see MPU6050_RA_SMPLRT_DIV
*/
void mpu_set_gyro_rate(char rate) {
     8a0:	e1a01000 	mov	r1, r0
    i2c_write_byte(MPU6050_RA_SMPLRT_DIV, rate);
     8a4:	e3a00019 	mov	r0, #25
     8a8:	eaffffb2 	b	778 <i2c_write_byte>

000008ac <mpu_set_DLPF_mode>:
* @return DLFP configuration
* @see MPU6050_RA_CONFIG
* @see MPU6050_CFG_DLPF_CFG_BIT
* @see MPU6050_CFG_DLPF_CFG_LENGTH
*/
void mpu_set_DLPF_mode(char mode) {
     8ac:	e1a03000 	mov	r3, r0
	i2c_write_bits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
     8b0:	e3a01002 	mov	r1, #2
     8b4:	e3a0001a 	mov	r0, #26
     8b8:	e3a02003 	mov	r2, #3
     8bc:	eaffffc7 	b	7e0 <i2c_write_bits>

000008c0 <mpu_set_6axis_FIFO_enabled>:
/**
 * Configure FIFO to store data from accelerometer temp and gyro
 * @param enabled 0 disabled; 1 enabled
 */
void mpu_set_6axis_FIFO_enabled(char enabled) {
	i2c_write_byte(MPU6050_RA_FIFO_EN, 0x78);
     8c0:	e3a00023 	mov	r0, #35	; 0x23
     8c4:	e3a01078 	mov	r1, #120	; 0x78
     8c8:	eaffffaa 	b	778 <i2c_write_byte>

000008cc <mpu_set_interrupt_mode>:

/**
 * Configure interruption mode
 * @param mode 0 active high; 1 active low
 */
void mpu_set_interrupt_mode(char mode) {
     8cc:	e1a03000 	mov	r3, r0
	i2c_write_bits(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_LEVEL_BIT, 1, mode);
     8d0:	e3a01007 	mov	r1, #7
     8d4:	e3a00037 	mov	r0, #55	; 0x37
     8d8:	e3a02001 	mov	r2, #1
     8dc:	eaffffbf 	b	7e0 <i2c_write_bits>

000008e0 <mpu_set_interrupt_drive>:

/**
 * Set interrupt drive mode
 * @param drive 0 push/pull; 1 open-drain
 */
void mpu_set_interrupt_drive(char drive) {
     8e0:	e1a03000 	mov	r3, r0
	i2c_write_bits(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_OPEN_BIT, 1, drive);
     8e4:	e3a01006 	mov	r1, #6
     8e8:	e3a00037 	mov	r0, #55	; 0x37
     8ec:	e3a02001 	mov	r2, #1
     8f0:	eaffffba 	b	7e0 <i2c_write_bits>

000008f4 <mpu_set_interrupt_latch>:

/**
 * Set interrupt latch mode
 * @param latch 0 50us pulse; 1 high until interrupt is cleared
 */
void mpu_set_interrupt_latch(char latch) {
     8f4:	e1a03000 	mov	r3, r0
	i2c_write_bits(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_LATCH_INT_EN_BIT, 1, latch);
     8f8:	e3a01005 	mov	r1, #5
     8fc:	e3a00037 	mov	r0, #55	; 0x37
     900:	e3a02001 	mov	r2, #1
     904:	eaffffb5 	b	7e0 <i2c_write_bits>

00000908 <mpu_set_FIFO_overflow_interrupt>:

/**
 * Set FIFO Buffer Overflow interrupt enabled status.
 * @param enabled 1 enabled; 0 disabled
 */
void mpu_set_FIFO_overflow_interrupt(char enabled) {
     908:	e1a03000 	mov	r3, r0
	i2c_write_bits(MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_FIFO_OFLOW_BIT, 1, enabled);
     90c:	e3a01004 	mov	r1, #4
     910:	e3a00038 	mov	r0, #56	; 0x38
     914:	e3a02001 	mov	r2, #1
     918:	eaffffb0 	b	7e0 <i2c_write_bits>

0000091c <mpu_set_data_ready_interrupt>:

/**
 * Set Data Ready interrupt enabled status.
 * @param enabled 1 enabled; 0 disabled
 */
void mpu_set_data_ready_interrupt(char enabled) {
     91c:	e1a03000 	mov	r3, r0
	i2c_write_bits(MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DATA_RDY_BIT, 1, enabled);
     920:	e3a01000 	mov	r1, #0
     924:	e3a00038 	mov	r0, #56	; 0x38
     928:	e3a02001 	mov	r2, #1
     92c:	eaffffab 	b	7e0 <i2c_write_bits>

00000930 <mpu_clear_interrupt>:
* These bits clear to 0 after the register has been read. Very useful
* for getting multiple INT statuses, since each single bit read clears
* all of them because it has to read the whole byte.
* @see MPU6050_RA_INT_STATUS
*/
int mpu_clear_interrupt(char* data) {
     930:	e1a01000 	mov	r1, r0
	return i2c_read_byte(MPU6050_RA_INT_STATUS, data);
     934:	e3a0003a 	mov	r0, #58	; 0x3a
     938:	eaffff8b 	b	76c <i2c_read_byte>

0000093c <mpu_set_FIFO_enabled>:
}

/** Enable FIFO usage.
 * @param enabled 1 enabled; 0 disabled
 */
void mpu_set_FIFO_enabled(char enabled) {
     93c:	e1a03000 	mov	r3, r0
	i2c_write_bits(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, 1, enabled);
     940:	e3a01006 	mov	r1, #6
     944:	e3a0006a 	mov	r0, #106	; 0x6a
     948:	e3a02001 	mov	r2, #1
     94c:	eaffffa3 	b	7e0 <i2c_write_bits>

00000950 <mpu_reset_FIFO>:
 * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
 * bit automatically clears to 0 after the reset has been triggered.
 * @param enabled 1 enabled; 0 disabled
 */
void mpu_reset_FIFO(void) {
	i2c_write_bits(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, 1, 1);
     950:	e3a02001 	mov	r2, #1
     954:	e3a0006a 	mov	r0, #106	; 0x6a
     958:	e3a01002 	mov	r1, #2
     95c:	e1a03002 	mov	r3, r2
     960:	eaffff9e 	b	7e0 <i2c_write_bits>

00000964 <mpu_init>:
* after start-up). This function also sets both the accelerometer and the gyroscope
* to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
* the clock source to use the X Gyro for reference, which is slightly better than
* the default internal clock source.
*/
void mpu_init(void) {
     964:	e92d4007 	push	{r0, r1, r2, lr}
	log_string_mpu(">> mpu_init\n");

    // configure clock source
	mpu_set_clock_source(MPU6050_CLOCK_PLL_XGYRO);
     968:	e3a00001 	mov	r0, #1
     96c:	ebffffb1 	bl	838 <mpu_set_clock_source>
	// disable temperature sensor
	mpu_set_temperature_sensor_enabled(0);
     970:	e3a00000 	mov	r0, #0
     974:	ebffffc3 	bl	888 <mpu_set_temperature_sensor_enabled>
	// set scale to
	// acc ±2g 16384 LSB/g
	// gyro ± 250 °/s 131 LSB/°/s
    mpu_set_full_scale_gyro_range(MPU6050_GYRO_FS_250);
     978:	e3a00000 	mov	r0, #0
     97c:	ebffffb2 	bl	84c <mpu_set_full_scale_gyro_range>
    mpu_set_full_scale_accel_range(MPU6050_ACCEL_FS_2);
     980:	e3a00000 	mov	r0, #0
     984:	ebffffb5 	bl	860 <mpu_set_full_scale_accel_range>

    // divide gyro output rate do 7, if DLPF>0 set back to 0 to keep output rate 1kHz
    mpu_set_gyro_rate(7);
     988:	e3a00007 	mov	r0, #7
     98c:	ebffffc3 	bl	8a0 <mpu_set_gyro_rate>
    // set digital low pass filter cut off frequency (disabled)
    mpu_set_DLPF_mode(0);
     990:	e3a00000 	mov	r0, #0
     994:	ebffffc4 	bl	8ac <mpu_set_DLPF_mode>

    // enable FIFO
    mpu_set_6axis_FIFO_enabled(1);
     998:	e3a00001 	mov	r0, #1
     99c:	ebffffc7 	bl	8c0 <mpu_set_6axis_FIFO_enabled>

    // configure interruption
    mpu_set_interrupt_mode(0); // active high
     9a0:	e3a00000 	mov	r0, #0
     9a4:	ebffffc8 	bl	8cc <mpu_set_interrupt_mode>
    mpu_set_interrupt_drive(0); // push/pull
     9a8:	e3a00000 	mov	r0, #0
     9ac:	ebffffcb 	bl	8e0 <mpu_set_interrupt_drive>
    mpu_set_interrupt_latch(0); // 50us pulse on interrupt
     9b0:	e3a00000 	mov	r0, #0
     9b4:	ebffffce 	bl	8f4 <mpu_set_interrupt_latch>
    mpu_set_FIFO_overflow_interrupt(1); // generate interrupt on FIFO overflow
     9b8:	e3a00001 	mov	r0, #1
     9bc:	ebffffd1 	bl	908 <mpu_set_FIFO_overflow_interrupt>
    mpu_set_data_ready_interrupt(1); // data ready interrupt
     9c0:	e3a00001 	mov	r0, #1
     9c4:	ebffffd4 	bl	91c <mpu_set_data_ready_interrupt>

    // clear interrupts
	char source;
	mpu_clear_interrupt(&source);
     9c8:	e28d0007 	add	r0, sp, #7
     9cc:	ebffffd7 	bl	930 <mpu_clear_interrupt>
    // reset FIFO
    mpu_reset_FIFO();
     9d0:	ebffffde 	bl	950 <mpu_reset_FIFO>
    // enable fifo
    mpu_set_FIFO_enabled(1);
     9d4:	e3a00001 	mov	r0, #1
     9d8:	ebffffd7 	bl	93c <mpu_set_FIFO_enabled>

    // stop sleeping
    mpu_set_sleep_enable(0);
     9dc:	e3a00000 	mov	r0, #0
     9e0:	ebffffa3 	bl	874 <mpu_set_sleep_enable>

	log_string_mpu("<< mpu_init\n");
}
     9e4:	e8bd400e 	pop	{r1, r2, r3, lr}
     9e8:	e12fff1e 	bx	lr

000009ec <mpu_get_FIFO_size>:
* This value indicates the number of bytes stored in the FIFO buffer. This
* number is in turn the number of bytes that can be read from the FIFO buffer
* and it is directly proportional to the number of samples available given the
* set of sensor data bound to be stored in the FIFO (register 35 and 36).
*/
void mpu_get_FIFO_size(int* size) {
     9ec:	e92d4013 	push	{r0, r1, r4, lr}
     9f0:	e1a04000 	mov	r4, r0
	char count[2];
	i2c_read_bytes(MPU6050_RA_FIFO_COUNTH, 2, count);
     9f4:	e28d2004 	add	r2, sp, #4
     9f8:	e3a00072 	mov	r0, #114	; 0x72
     9fc:	e3a01002 	mov	r1, #2
     a00:	ebffff43 	bl	714 <i2c_read_bytes>
	*size = (((int)count[0]) << 8) | count[1];
     a04:	e5dd2004 	ldrb	r2, [sp, #4]
     a08:	e5dd3005 	ldrb	r3, [sp, #5]
     a0c:	e1833402 	orr	r3, r3, r2, lsl #8
     a10:	e5843000 	str	r3, [r4]
}
     a14:	e8bd401c 	pop	{r2, r3, r4, lr}
     a18:	e12fff1e 	bx	lr

00000a1c <mpu_get_motion6>:
//    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
//    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
//    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
//}
void mpu_get_motion6(char* ax_h, char* ax_l, char* ay_h, char* ay_l, char* az_h, char* az_l,
		char* gx_h, char* gx_l, char* gy_h, char* gy_l, char* gz_h, char* gz_l) {
     a1c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     a20:	e24dd014 	sub	sp, sp, #20
     a24:	e1a06000 	mov	r6, r0
     a28:	e1a05001 	mov	r5, r1
     a2c:	e1a04002 	mov	r4, r2
	char c[14];
	i2c_read_bytes(MPU6050_RA_ACCEL_XOUT_H, 14, c);
     a30:	e3a0003b 	mov	r0, #59	; 0x3b
     a34:	e1a0200d 	mov	r2, sp
     a38:	e3a0100e 	mov	r1, #14
//    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
//    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
//    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
//}
void mpu_get_motion6(char* ax_h, char* ax_l, char* ay_h, char* ay_l, char* az_h, char* az_l,
		char* gx_h, char* gx_l, char* gy_h, char* gy_l, char* gz_h, char* gz_l) {
     a3c:	e1a07003 	mov	r7, r3
	char c[14];
	i2c_read_bytes(MPU6050_RA_ACCEL_XOUT_H, 14, c);
     a40:	ebffff33 	bl	714 <i2c_read_bytes>
	*ax_h = c[0];
     a44:	e5dd3000 	ldrb	r3, [sp]
     a48:	e5c63000 	strb	r3, [r6]
	*ax_l = c[1];
     a4c:	e5dd3001 	ldrb	r3, [sp, #1]
     a50:	e5c53000 	strb	r3, [r5]
	*ay_h = c[2];
     a54:	e5dd3002 	ldrb	r3, [sp, #2]
     a58:	e5c43000 	strb	r3, [r4]
	*ay_l = c[3];
     a5c:	e5dd3003 	ldrb	r3, [sp, #3]
	*az_h = c[4];
     a60:	e5dd2004 	ldrb	r2, [sp, #4]
	char c[14];
	i2c_read_bytes(MPU6050_RA_ACCEL_XOUT_H, 14, c);
	*ax_h = c[0];
	*ax_l = c[1];
	*ay_h = c[2];
	*ay_l = c[3];
     a64:	e5c73000 	strb	r3, [r7]
	*az_h = c[4];
     a68:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
     a6c:	e5c32000 	strb	r2, [r3]
	*az_l = c[5];
     a70:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
     a74:	e5dd2005 	ldrb	r2, [sp, #5]
     a78:	e5c32000 	strb	r2, [r3]
	*gx_h = c[8];
     a7c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
     a80:	e5dd2008 	ldrb	r2, [sp, #8]
     a84:	e5c32000 	strb	r2, [r3]
	*gx_l = c[9];
     a88:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
     a8c:	e5dd2009 	ldrb	r2, [sp, #9]
     a90:	e5c32000 	strb	r2, [r3]
	*gy_h = c[10];
     a94:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
     a98:	e5dd200a 	ldrb	r2, [sp, #10]
     a9c:	e5c32000 	strb	r2, [r3]
	*gy_l = c[11];
     aa0:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
     aa4:	e5dd200b 	ldrb	r2, [sp, #11]
     aa8:	e5c32000 	strb	r2, [r3]
	*gz_h = c[12];
     aac:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
     ab0:	e5dd200c 	ldrb	r2, [sp, #12]
     ab4:	e5c32000 	strb	r2, [r3]
	*gz_l = c[13];
     ab8:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
     abc:	e5dd200d 	ldrb	r2, [sp, #13]
     ac0:	e5c32000 	strb	r2, [r3]
}
     ac4:	e28dd014 	add	sp, sp, #20
     ac8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
     acc:	e12fff1e 	bx	lr

00000ad0 <mpu_get_FIFO_motion6>:
* that was previously read from the FIFO until new data is available. The user
* should check FIFO_COUNT to ensure that the FIFO buffer is not read when
* empty.
*/
void mpu_get_FIFO_motion6(char* ax_h, char* ax_l, char* ay_h, char* ay_l, char* az_h, char* az_l,
		char* gx_h, char* gx_l, char* gy_h, char* gy_l, char* gz_h, char* gz_l) {
     ad0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     ad4:	e24dd014 	sub	sp, sp, #20
     ad8:	e1a06000 	mov	r6, r0
     adc:	e1a05001 	mov	r5, r1
     ae0:	e1a04002 	mov	r4, r2

	char c[12];
	i2c_read_bytes(MPU6050_RA_FIFO_R_W, 12, c);
     ae4:	e3a00074 	mov	r0, #116	; 0x74
     ae8:	e28d2004 	add	r2, sp, #4
     aec:	e3a0100c 	mov	r1, #12
* that was previously read from the FIFO until new data is available. The user
* should check FIFO_COUNT to ensure that the FIFO buffer is not read when
* empty.
*/
void mpu_get_FIFO_motion6(char* ax_h, char* ax_l, char* ay_h, char* ay_l, char* az_h, char* az_l,
		char* gx_h, char* gx_l, char* gy_h, char* gy_l, char* gz_h, char* gz_l) {
     af0:	e1a07003 	mov	r7, r3

	char c[12];
	i2c_read_bytes(MPU6050_RA_FIFO_R_W, 12, c);
     af4:	ebffff06 	bl	714 <i2c_read_bytes>
	*ax_h = c[0];
     af8:	e5dd3004 	ldrb	r3, [sp, #4]
     afc:	e5c63000 	strb	r3, [r6]
	*ax_l = c[1];
     b00:	e5dd3005 	ldrb	r3, [sp, #5]
     b04:	e5c53000 	strb	r3, [r5]
	*ay_h = c[2];
     b08:	e5dd3006 	ldrb	r3, [sp, #6]
     b0c:	e5c43000 	strb	r3, [r4]
	*ay_l = c[3];
     b10:	e5dd3007 	ldrb	r3, [sp, #7]
	*az_h = c[4];
     b14:	e5dd2008 	ldrb	r2, [sp, #8]
	char c[12];
	i2c_read_bytes(MPU6050_RA_FIFO_R_W, 12, c);
	*ax_h = c[0];
	*ax_l = c[1];
	*ay_h = c[2];
	*ay_l = c[3];
     b18:	e5c73000 	strb	r3, [r7]
	*az_h = c[4];
     b1c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
     b20:	e5c32000 	strb	r2, [r3]
	*az_l = c[5];
     b24:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
     b28:	e5dd2009 	ldrb	r2, [sp, #9]
     b2c:	e5c32000 	strb	r2, [r3]
	*gx_h = c[6];
     b30:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
     b34:	e5dd200a 	ldrb	r2, [sp, #10]
     b38:	e5c32000 	strb	r2, [r3]
	*gx_l = c[7];
     b3c:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
     b40:	e5dd200b 	ldrb	r2, [sp, #11]
     b44:	e5c32000 	strb	r2, [r3]
	*gy_h = c[8];
     b48:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
     b4c:	e5dd200c 	ldrb	r2, [sp, #12]
     b50:	e5c32000 	strb	r2, [r3]
	*gy_l = c[9];
     b54:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
     b58:	e5dd200d 	ldrb	r2, [sp, #13]
     b5c:	e5c32000 	strb	r2, [r3]
	*gz_h = c[10];
     b60:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
     b64:	e5dd200e 	ldrb	r2, [sp, #14]
     b68:	e5c32000 	strb	r2, [r3]
	*gz_l = c[11];
     b6c:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
     b70:	e5dd200f 	ldrb	r2, [sp, #15]
     b74:	e5c32000 	strb	r2, [r3]
//	i2c_read_byte(MPU6050_RA_FIFO_R_W, gy_h);
//	i2c_read_byte(MPU6050_RA_FIFO_R_W, gy_l);
//
//	i2c_read_byte(MPU6050_RA_FIFO_R_W, gz_h);
//	i2c_read_byte(MPU6050_RA_FIFO_R_W, gz_l);
}
     b78:	e28dd014 	add	sp, sp, #20
     b7c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
     b80:	e12fff1e 	bx	lr

00000b84 <main>:
static unsigned short timestamp = 0;

/**
 * Entry point
 */
int main(void){
     b84:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 * 													(P=1 -> PSEL=00, P=2 -> PSEL=01, P=4 -> PSEL=10, P=8 -> PSEL=11)
 */
inline void PLL_Init(void){

#ifdef CRYSTAL12MHz
	PLLCFG=0x24;                // 12MHz crystal      -> 60MHz
     b88:	e59f3480 	ldr	r3, [pc, #1152]	; 1010 <main+0x48c>
     b8c:	e3a02024 	mov	r2, #36	; 0x24
     b90:	e5c32084 	strb	r2, [r3, #132]	; 0x84
#endif
#ifdef CRYSTAL14745600Hz
	PLLCFG=0x23;                // 14.7456MHz crystal -> 58.9824MHz
#endif

	PLLCON=0x1;                 //PLLE = 1, PLLEnable
     b94:	e3a02001 	mov	r2, #1
     b98:	e5c32080 	strb	r2, [r3, #128]	; 0x80
	PLLFEED=0xAA;               // Validation sequence
     b9c:	e3e02055 	mvn	r2, #85	; 0x55
     ba0:	e5c3208c 	strb	r2, [r3, #140]	; 0x8c
	PLLFEED=0x55;               // Validation sequence
     ba4:	e28220ab 	add	r2, r2, #171	; 0xab
     ba8:	e5c3208c 	strb	r2, [r3, #140]	; 0x8c
static unsigned short timestamp = 0;

/**
 * Entry point
 */
int main(void){
     bac:	e24dd028 	sub	sp, sp, #40	; 0x28
     bb0:	e1a02003 	mov	r2, r3
#endif

	PLLCON=0x1;                 //PLLE = 1, PLLEnable
	PLLFEED=0xAA;               // Validation sequence
	PLLFEED=0x55;               // Validation sequence
	while(!(PLLSTAT & 0x400)); // Wait PLL to lock
     bb4:	e1d218b8 	ldrh	r1, [r2, #136]	; 0x88
     bb8:	e3110b01 	tst	r1, #1024	; 0x400
     bbc:	e59f344c 	ldr	r3, [pc, #1100]	; 1010 <main+0x48c>
     bc0:	0afffffb 	beq	bb4 <main+0x30>
	PLLCON=0x3;                 // PLLC = 1, PLLConnect, Assert the PLL to be the cclk
     bc4:	e3a06003 	mov	r6, #3
	PLLFEED=0xAA;               // Validation sequence
     bc8:	e3e02055 	mvn	r2, #85	; 0x55

	PLLCON=0x1;                 //PLLE = 1, PLLEnable
	PLLFEED=0xAA;               // Validation sequence
	PLLFEED=0x55;               // Validation sequence
	while(!(PLLSTAT & 0x400)); // Wait PLL to lock
	PLLCON=0x3;                 // PLLC = 1, PLLConnect, Assert the PLL to be the cclk
     bcc:	e5c36080 	strb	r6, [r3, #128]	; 0x80
	PLLFEED=0xAA;               // Validation sequence
     bd0:	e5c3208c 	strb	r2, [r3, #140]	; 0x8c
	PLLFEED=0x55;               // Validation sequence
     bd4:	e28220ab 	add	r2, r2, #171	; 0xab
     bd8:	e5c3208c 	strb	r2, [r3, #140]	; 0x8c
 * > 60MHz         -> MAMTIM = 4 CCLK
 */
inline void MAM_Init(void){

#ifdef CRYSTAL12MHz
	MAMTIM = 4; // 4 clock fetches
     bdc:	e3a02004 	mov	r2, #4
     be0:	e5c32004 	strb	r2, [r3, #4]
#endif
#ifdef CRYSTAL14745600Hz
	MAMTIM = 3; // 3 clock fetches
#endif
	MAMCR = 2;	// MAM functions fully enabled
     be4:	e3a02002 	mov	r2, #2
 * Configure the peripheral devices clock divider
 */
inline void APB_Init(void){
	// peripheral clock = PCLK = CCLK/4
	//APBDIV |= 0x02;
	APBDIV &= ~0x03;
     be8:	e59f5424 	ldr	r5, [pc, #1060]	; 1014 <main+0x490>
	MAMTIM = 4; // 4 clock fetches
#endif
#ifdef CRYSTAL14745600Hz
	MAMTIM = 3; // 3 clock fetches
#endif
	MAMCR = 2;	// MAM functions fully enabled
     bec:	e5c32000 	strb	r2, [r3]
 * Configure the peripheral devices clock divider
 */
inline void APB_Init(void){
	// peripheral clock = PCLK = CCLK/4
	//APBDIV |= 0x02;
	APBDIV &= ~0x03;
     bf0:	e5d53000 	ldrb	r3, [r5]
     bf4:	e20330fc 	and	r3, r3, #252	; 0xfc
     bf8:	e5c53000 	strb	r3, [r5]

	PLL_Init(); // Turn on PLL clock
	MAM_Init(); // Turn on MAM pre-fetcher
	APB_Init(); // Turn on the peripheral devices clock divider

	logger_init(); // uart0
     bfc:	ebfffded 	bl	3b8 <logger_init>

static inline unsigned enableIRQ(void)
{
  unsigned _cpsr;

  _cpsr = asm_get_cpsr();
     c00:	ebfffd48 	bl	128 <asm_get_cpsr>
inline void pulses_in_init(void){

	log_string_debug(">> pulses_in_init\n");

	// Set the pin function
	PINSEL1 |= 0x2 << 22; // CAP2.0
     c04:	e59f740c 	ldr	r7, [pc, #1036]	; 1018 <main+0x494>
  asm_set_cpsr(_cpsr & ~IRQ_MASK);
     c08:	e3c00080 	bic	r0, r0, #128	; 0x80
     c0c:	ebfffd47 	bl	130 <asm_set_cpsr>
     c10:	e5973004 	ldr	r3, [r7, #4]
     c14:	e3833502 	orr	r3, r3, #8388608	; 0x800000
     c18:	e5873004 	str	r3, [r7, #4]
	PINSEL1 |= 0x2 << 24; // CAP2.1
     c1c:	e5973004 	ldr	r3, [r7, #4]
     c20:	e3833402 	orr	r3, r3, #33554432	; 0x2000000
     c24:	e5873004 	str	r3, [r7, #4]
	PINSEL1 |= 0x2 << 26; // CAP2.2
     c28:	e5973004 	ldr	r3, [r7, #4]
     c2c:	e3833302 	orr	r3, r3, #134217728	; 0x8000000
     c30:	e5873004 	str	r3, [r7, #4]
	PINSEL1 |= 0x1 << 0;  // EINT0
     c34:	e5973004 	ldr	r3, [r7, #4]
     c38:	e3833001 	orr	r3, r3, #1
     c3c:	e5873004 	str	r3, [r7, #4]

	// Timer Setup
	T2CCR |= 0x5 << 0; // capture and interrupt on CAP2.0 rising edge
     c40:	e59f33d4 	ldr	r3, [pc, #980]	; 101c <main+0x498>
     c44:	e1d322b8 	ldrh	r2, [r3, #40]	; 0x28
     c48:	e3822005 	orr	r2, r2, #5
     c4c:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
	T2CCR |= 0x5 << 3; // capture and interrupt on CAP2.1 rising edge
     c50:	e1d322b8 	ldrh	r2, [r3, #40]	; 0x28
     c54:	e3822028 	orr	r2, r2, #40	; 0x28
     c58:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
	T2CCR |= 0x5 << 6; // capture and interrupt on CAP2.2 rising edge
     c5c:	e1d322b8 	ldrh	r2, [r3, #40]	; 0x28
	T2TCR = 1; //enable T2
     c60:	e3a08001 	mov	r8, #1
	PINSEL1 |= 0x1 << 0;  // EINT0

	// Timer Setup
	T2CCR |= 0x5 << 0; // capture and interrupt on CAP2.0 rising edge
	T2CCR |= 0x5 << 3; // capture and interrupt on CAP2.1 rising edge
	T2CCR |= 0x5 << 6; // capture and interrupt on CAP2.2 rising edge
     c64:	e3822d05 	orr	r2, r2, #320	; 0x140
     c68:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
	T2TCR = 1; //enable T2
     c6c:	e5c38004 	strb	r8, [r3, #4]

	// EINT setup
	EXTMODE |= 0x1 << 0; // EINT is edge sensitive
     c70:	e5d53048 	ldrb	r3, [r5, #72]	; 0x48
     c74:	e1833008 	orr	r3, r3, r8
     c78:	e5c53048 	strb	r3, [r5, #72]	; 0x48
	EXTPOLAR |= 0x1 << 0; // EINT is rising edge sensitive
     c7c:	e5d5304c 	ldrb	r3, [r5, #76]	; 0x4c
     c80:	e1833008 	orr	r3, r3, r8
     c84:	e5c5304c 	strb	r3, [r5, #76]	; 0x4c
	EXTINT |= 0x1 << 0; // reset EINT0
     c88:	e5d53040 	ldrb	r3, [r5, #64]	; 0x40
     c8c:	e1833008 	orr	r3, r3, r8
     c90:	e5c53040 	strb	r3, [r5, #64]	; 0x40

	// Enable the interrupts
	VICIntSelect |= 0x1 << 26;// Timer 2 as FIQ
     c94:	e3e04000 	mvn	r4, #0
     c98:	e5143ff3 	ldr	r3, [r4, #-4083]	; 0xfffff00d
     c9c:	e3833301 	orr	r3, r3, #67108864	; 0x4000000
     ca0:	e5043ff3 	str	r3, [r4, #-4083]	; 0xfffff00d
	VICIntEnable |= 0x1 << 26; // source #26 enabled as FIQ or IRQ
     ca4:	e5143fef 	ldr	r3, [r4, #-4079]	; 0xfffff011
     ca8:	e3833301 	orr	r3, r3, #67108864	; 0x4000000
     cac:	e5043fef 	str	r3, [r4, #-4079]	; 0xfffff011
	VICIntSelect |= 0x1 << 14;// EINT2 as FIQ
     cb0:	e5143ff3 	ldr	r3, [r4, #-4083]	; 0xfffff00d
     cb4:	e3833901 	orr	r3, r3, #16384	; 0x4000
     cb8:	e5043ff3 	str	r3, [r4, #-4083]	; 0xfffff00d
	VICIntEnable |= 0x1 << 14; //source #14 enabled as FIQ or IRQ
     cbc:	e5143fef 	ldr	r3, [r4, #-4079]	; 0xfffff011
     cc0:	e3833901 	orr	r3, r3, #16384	; 0x4000
     cc4:	e5043fef 	str	r3, [r4, #-4079]	; 0xfffff011
inline void imu_init(void){

	log_string_debug(">> imu_init\n");

	// start the communication with the IMU
	i2c_init();
     cc8:	ebfffe79 	bl	6b4 <i2c_init>
	// configure mpu and start taking samples
	mpu_init();
     ccc:	ebffff24 	bl	964 <mpu_init>

	// Configure data ready interrupt
	// Set the pin function
	PINSEL0 |= 0x1 << 30;  // EINT2
     cd0:	e5973000 	ldr	r3, [r7]
     cd4:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
     cd8:	e5873000 	str	r3, [r7]

	// EINT setup
	EXTMODE |= 0x1 << 2; // EINT2 is edge sensitive
     cdc:	e5d53048 	ldrb	r3, [r5, #72]	; 0x48
     ce0:	e3833004 	orr	r3, r3, #4
     ce4:	e5c53048 	strb	r3, [r5, #72]	; 0x48
	EXTPOLAR |= 0x1 << 2; // EINT2 is rising edge sensitive
     ce8:	e5d5304c 	ldrb	r3, [r5, #76]	; 0x4c
     cec:	e3833004 	orr	r3, r3, #4
     cf0:	e5c5304c 	strb	r3, [r5, #76]	; 0x4c
	EXTINT |= 0x1 << 2; // reset EINT2
     cf4:	e5d53040 	ldrb	r3, [r5, #64]	; 0x40
     cf8:	e3833004 	orr	r3, r3, #4
     cfc:	e5c53040 	strb	r3, [r5, #64]	; 0x40

	VICVectAddr1 = (unsigned int) &imu_data_ready; //Setting the interrupt handler location
     d00:	e59f3318 	ldr	r3, [pc, #792]	; 1020 <main+0x49c>
     d04:	e5043efb 	str	r3, [r4, #-3835]	; 0xfffff105
	VICVectCntl1 = 0x30; //Vectored Interrupt slot enabled with source #16 (EINT2)
     d08:	e3a03030 	mov	r3, #48	; 0x30
     d0c:	e5043dfb 	str	r3, [r4, #-3579]	; 0xfffff205
	VICIntEnable |= 0x1 << 16; //source #16 enabled as FIQ or IRQ
     d10:	e5143fef 	ldr	r3, [r4, #-4079]	; 0xfffff011
     d14:	e3833801 	orr	r3, r3, #65536	; 0x10000
     d18:	e5043fef 	str	r3, [r4, #-4079]	; 0xfffff011
inline void adc_init(void){

	log_string_debug(">> adc_init\n");

	// Set the pin function
	PINSEL1 |= 0x3 << 12; // AD0.0
     d1c:	e5973004 	ldr	r3, [r7, #4]
     d20:	e3833a03 	orr	r3, r3, #12288	; 0x3000
     d24:	e5873004 	str	r3, [r7, #4]
	PINSEL1 |= 0x3 << 14; // AD0.1
     d28:	e5973004 	ldr	r3, [r7, #4]
     d2c:	e3833903 	orr	r3, r3, #49152	; 0xc000
     d30:	e5873004 	str	r3, [r7, #4]
	PINSEL1 |= 0x3 << 16; // AD0.2
     d34:	e5973004 	ldr	r3, [r7, #4]
     d38:	e3833803 	orr	r3, r3, #196608	; 0x30000
     d3c:	e5873004 	str	r3, [r7, #4]
	PINSEL0 |= 0x3 << 20; // AD0.3
     d40:	e5973000 	ldr	r3, [r7]
     d44:	e3833603 	orr	r3, r3, #3145728	; 0x300000
     d48:	e5873000 	str	r3, [r7]
	PINSEL0 |= 0x3 << 22; // AD0.4
     d4c:	e5973000 	ldr	r3, [r7]
     d50:	e3833503 	orr	r3, r3, #12582912	; 0xc00000
     d54:	e5873000 	str	r3, [r7]

	// ADC setup
	ADCR |= 0x01 << 16; // Start A/D Conversion in burst mode
     d58:	e59f32c4 	ldr	r3, [pc, #708]	; 1024 <main+0x4a0>
     d5c:	e5932000 	ldr	r2, [r3]
     d60:	e3822801 	orr	r2, r2, #65536	; 0x10000
     d64:	e5832000 	str	r2, [r3]
	ADCR |= 0x03 << 8; // 3,75MHz for adc if pclk=15MHz; 3,6864MHz if pclk=14.7456MHz
     d68:	e5932000 	ldr	r2, [r3]
     d6c:	e3822c03 	orr	r2, r2, #768	; 0x300
     d70:	e5832000 	str	r2, [r3]
	ADCR |= 0x1F; // Read AD0.0 - AD0.4
     d74:	e5932000 	ldr	r2, [r3]
     d78:	e382201f 	orr	r2, r2, #31
     d7c:	e5832000 	str	r2, [r3]
	ADCR |= 0x01 << 21; // The ADC is operational
     d80:	e5932000 	ldr	r2, [r3]
     d84:	e3822602 	orr	r2, r2, #2097152	; 0x200000
     d88:	e5832000 	str	r2, [r3]
inline void pwm_out_init(void){

	log_string_debug(">> pwm_out_init\n");

	// Set the pin function
	PINSEL0 |= 0x2 << 6;  // MAT0.0
     d8c:	e5973000 	ldr	r3, [r7]
     d90:	e3833080 	orr	r3, r3, #128	; 0x80
     d94:	e5873000 	str	r3, [r7]
	PINSEL0 |= 0x2 << 10; // MAT0.1
     d98:	e5973000 	ldr	r3, [r7]
     d9c:	e3833b02 	orr	r3, r3, #2048	; 0x800
     da0:	e5873000 	str	r3, [r7]
	PINSEL0 |= 0x2 << 24; // MAT1.0
     da4:	e5973000 	ldr	r3, [r7]
     da8:	e3833402 	orr	r3, r3, #33554432	; 0x2000000
     dac:	e5873000 	str	r3, [r7]
	PINSEL0 |= 0x2 << 26; // MAT1.1
     db0:	e5973000 	ldr	r3, [r7]
     db4:	e3833302 	orr	r3, r3, #134217728	; 0x8000000
     db8:	e5873000 	str	r3, [r7]

#ifdef CRYSTAL12MHz
	T0PR = 294; // 255 levels for T2TC in 5ms
     dbc:	e59f2264 	ldr	r2, [pc, #612]	; 1028 <main+0x4a4>
	T1PR = 294;
     dc0:	e59f3264 	ldr	r3, [pc, #612]	; 102c <main+0x4a8>
	PINSEL0 |= 0x2 << 10; // MAT0.1
	PINSEL0 |= 0x2 << 24; // MAT1.0
	PINSEL0 |= 0x2 << 26; // MAT1.1

#ifdef CRYSTAL12MHz
	T0PR = 294; // 255 levels for T2TC in 5ms
     dc4:	e59f1264 	ldr	r1, [pc, #612]	; 1030 <main+0x4ac>
     dc8:	e582100c 	str	r1, [r2, #12]
	T1PR = 294;
     dcc:	e583100c 	str	r1, [r3, #12]
#ifdef CRYSTAL14745600Hz
	T0PR = 289; // 255 levels for T2TC in 5ms
	T1PR = 289;
#endif

	T0PC = 0; // Prescale = 0
     dd0:	e3a01000 	mov	r1, #0
     dd4:	e5821010 	str	r1, [r2, #16]
	T1PC = 0;
     dd8:	e5831010 	str	r1, [r3, #16]
	T0TC = 0; // Counter = 0
     ddc:	e5821008 	str	r1, [r2, #8]
	T1TC = 0;
     de0:	e5831008 	str	r1, [r3, #8]

	T0MCR |= (0x1 << 10); // Reset the counter on MAT0.3
     de4:	e1d201b4 	ldrh	r0, [r2, #20]
     de8:	e3800b01 	orr	r0, r0, #1024	; 0x400
     dec:	e1c201b4 	strh	r0, [r2, #20]
	T1MCR |= (0x1 << 10); // Reset the counter on MAT1.3
     df0:	e1d301b4 	ldrh	r0, [r3, #20]
     df4:	e3800b01 	orr	r0, r0, #1024	; 0x400
     df8:	e1c301b4 	strh	r0, [r3, #20]
	T0MR3 = 255; // MAT0.3 every 255 counts (5ms)
     dfc:	e3a000ff 	mov	r0, #255	; 0xff
     e00:	e5820024 	str	r0, [r2, #36]	; 0x24
	T1MR3 = 255; // MAT1.3 every 255 counts (5ms)
     e04:	e5830024 	str	r0, [r3, #36]	; 0x24

	T0PWMCON |= (0x1 << 0); // MAT0.0 configured as PWM output
     e08:	e5920074 	ldr	r0, [r2, #116]	; 0x74
     e0c:	e1800008 	orr	r0, r0, r8
     e10:	e5820074 	str	r0, [r2, #116]	; 0x74
	T0PWMCON |= (0x1 << 1); // MAT0.1 configured as PWM output
     e14:	e5920074 	ldr	r0, [r2, #116]	; 0x74
     e18:	e3800002 	orr	r0, r0, #2
     e1c:	e5820074 	str	r0, [r2, #116]	; 0x74
	T1PWMCON |= (0x1 << 0); // MAT1.0 configured as PWM output
     e20:	e5930074 	ldr	r0, [r3, #116]	; 0x74
     e24:	e1800008 	orr	r0, r0, r8
     e28:	e5830074 	str	r0, [r3, #116]	; 0x74
	T1PWMCON |= (0x1 << 1); // MAT1.1 configured as PWM output
     e2c:	e5930074 	ldr	r0, [r3, #116]	; 0x74
     e30:	e3800002 	orr	r0, r0, #2
     e34:	e5830074 	str	r0, [r3, #116]	; 0x74

	T0MR0 = 256; // initially LOW
     e38:	e3a00c01 	mov	r0, #256	; 0x100
     e3c:	e5820018 	str	r0, [r2, #24]
	T0MR1 = 256; // initially LOW
     e40:	e582001c 	str	r0, [r2, #28]
	T1MR0 = 256; // initially LOW
     e44:	e5830018 	str	r0, [r3, #24]
	T1MR1 = 256; // initially LOW
     e48:	e583001c 	str	r0, [r3, #28]

	T0TCR = 1; // enable T0
     e4c:	e5c28004 	strb	r8, [r2, #4]
	T1TCR = 1; // enable T1
     e50:	e5c38004 	strb	r8, [r3, #4]

	log_string_debug(">> protocol_init\n");

	volatile char dummy;

	PINSEL0 |= 0x05 << 16; // Set the pins function
     e54:	e5973000 	ldr	r3, [r7]
     e58:	e3833805 	orr	r3, r3, #327680	; 0x50000
     e5c:	e5873000 	str	r3, [r7]
	U1FCR    = 0x07; // FIFOControlRegister, Tx, Rx FIFO Reset and FIFO enable, Rx trigger = 1
     e60:	e59f31cc 	ldr	r3, [pc, #460]	; 1034 <main+0x4b0>
     e64:	e3a02007 	mov	r2, #7
     e68:	e5c32008 	strb	r2, [r3, #8]
	U1LCR 	 = 0x83; // DivisorLatchAccessBit = 1,  UART 8N1, allow access to divider-latches
     e6c:	e3e0207c 	mvn	r2, #124	; 0x7c
     e70:	e5c3200c 	strb	r2, [r3, #12]

#ifdef CRYSTAL12MHz
	U1DLL	 = 0x06; // DivisorLatchLow bit
     e74:	e2822083 	add	r2, r2, #131	; 0x83
     e78:	e5c32000 	strb	r2, [r3]
	U1DLM	 = 0x00; // DivisorLatchHigh bit
     e7c:	e5c31004 	strb	r1, [r3, #4]
	U1FDR	|= 0x05; // DivAddVal
     e80:	e5d32028 	ldrb	r2, [r3, #40]	; 0x28
     e84:	e3822005 	orr	r2, r2, #5
     e88:	e5c32028 	strb	r2, [r3, #40]	; 0x28
	U1FDR	|= 0x0E << 4; // MulVal = 14
     e8c:	e5d32028 	ldrb	r2, [r3, #40]	; 0x28
     e90:	e38220e0 	orr	r2, r2, #224	; 0xe0
     e94:	e5c32028 	strb	r2, [r3, #40]	; 0x28
	U1DLM	 = 0x00; // DivisorLatchHigh bit
#endif

	U1LCR	 = 0x03; // DivisorLatchAccessBit = 0,  UART 8N1, forbid access to divider-latches

	VICVectAddr2 = (unsigned int) &protocol_in; //Setting the interrupt handler location to the 2th vectored interruption slot
     e98:	e59f2198 	ldr	r2, [pc, #408]	; 1038 <main+0x4b4>
#ifdef CRYSTAL14745600Hz
	U1DLL	 = 0x08; // DivisorLatchLow bit
	U1DLM	 = 0x00; // DivisorLatchHigh bit
#endif

	U1LCR	 = 0x03; // DivisorLatchAccessBit = 0,  UART 8N1, forbid access to divider-latches
     e9c:	e5c3600c 	strb	r6, [r3, #12]

	VICVectAddr2 = (unsigned int) &protocol_in; //Setting the interrupt handler location to the 2th vectored interruption slot
     ea0:	e5042ef7 	str	r2, [r4, #-3831]	; 0xfffff109
	VICVectCntl2 = 0x27; //Vectored Interrupt slot 2 enabled with source #7 (UART1)
     ea4:	e3a02027 	mov	r2, #39	; 0x27
     ea8:	e5042df7 	str	r2, [r4, #-3575]	; 0xfffff209
	VICIntEnable |= 0x00000080; //source #7 enabled as FIQ or IRQ
     eac:	e5142fef 	ldr	r2, [r4, #-4079]	; 0xfffff011
     eb0:	e3822080 	orr	r2, r2, #128	; 0x80
     eb4:	e5042fef 	str	r2, [r4, #-4079]	; 0xfffff011

	cmd_out.i = 0;
     eb8:	e59f217c 	ldr	r2, [pc, #380]	; 103c <main+0x4b8>
     ebc:	e5821018 	str	r1, [r2, #24]
	cmd_in.i = 0;
     ec0:	e582103c 	str	r1, [r2, #60]	; 0x3c

	dummy = U1IIR;   // Read IrqID - Required to Get Interrupts Started
     ec4:	e5d32008 	ldrb	r2, [r3, #8]
     ec8:	e5cd2027 	strb	r2, [sp, #39]	; 0x27
	U1IER = 1;       // Enable UART1 RX (and THRE Interrupts)
     ecc:	e5c38004 	strb	r8, [r3, #4]

static inline unsigned enableFIQ(void)
{
  unsigned _cpsr;

  _cpsr = asm_get_cpsr();
     ed0:	ebfffc94 	bl	128 <asm_get_cpsr>
  asm_set_cpsr(_cpsr & ~FIQ_MASK);
     ed4:	e3c00040 	bic	r0, r0, #64	; 0x40
     ed8:	ebfffc94 	bl	130 <asm_set_cpsr>
	pwm_out_init(); // start pwm for the H bridges				| Timer 0 and Timer 1 operating in PWM mode, no interruption
	protocol_init(); // start the communication protocol			| uart1, Priority 2

	enableFIQ();

	VICDefVectAddr = (unsigned int) &error;
     edc:	e59f315c 	ldr	r3, [pc, #348]	; 1040 <main+0x4bc>
     ee0:	e5043fcb 	str	r3, [r4, #-4043]	; 0xfffff035
	//set_wheel_pwm(LEFT_WHEEL,0x7F);

	// imu_data_in_pos -> aponta para o ultimo dado valido
	// imu_data_out_pos -> aponta para o ultimo dado enviado
	while(1){
		if(imu_data_available) {
     ee4:	e59f3150 	ldr	r3, [pc, #336]	; 103c <main+0x4b8>
     ee8:	e5d33014 	ldrb	r3, [r3, #20]
     eec:	e3530000 	cmp	r3, #0
     ef0:	0afffffb 	beq	ee4 <main+0x360>
			char source;
			// find out where the interruption came from
			mpu_clear_interrupt(&source);
     ef4:	e28d0027 	add	r0, sp, #39	; 0x27
     ef8:	ebfffe8c 	bl	930 <mpu_clear_interrupt>

			log_string_debug("src:");
			log_byte_debug(source);
			log_string_debug("\n");

			if (source & (0x1 << MPU6050_INTERRUPT_DATA_RDY_BIT)) {
     efc:	e5dd3027 	ldrb	r3, [sp, #39]	; 0x27
     f00:	e3130001 	tst	r3, #1
     f04:	0a00003d 	beq	1000 <main+0x47c>
				log_string_debug("dataready: ");

				// find out how many entries are in the fifo
				int size;
				mpu_get_FIFO_size(&size);
     f08:	e28d0020 	add	r0, sp, #32
     f0c:	ebfffeb6 	bl	9ec <mpu_get_FIFO_size>

				log_int_debug(size);
				log_string_debug(" bytes\n");

				// try to clear the fifo before an overflow occurs
				if (size > 840 || source & (0x1 << MPU6050_INTERRUPT_FIFO_OFLOW_BIT)) {
     f10:	e59d3020 	ldr	r3, [sp, #32]
     f14:	e3530fd2 	cmp	r3, #840	; 0x348
     f18:	ca000002 	bgt	f28 <main+0x3a4>
     f1c:	e5dd3027 	ldrb	r3, [sp, #39]	; 0x27
     f20:	e3130010 	tst	r3, #16
     f24:	0a000032 	beq	ff4 <main+0x470>
					log_string_warning("MPU overflow\n");
					mpu_set_FIFO_enabled(0);
     f28:	e3a00000 	mov	r0, #0
     f2c:	ebfffe82 	bl	93c <mpu_set_FIFO_enabled>
					mpu_reset_FIFO();
     f30:	ebfffe86 	bl	950 <mpu_reset_FIFO>
					mpu_set_FIFO_enabled(1);
     f34:	e3a00001 	mov	r0, #1
     f38:	ebfffe7f 	bl	93c <mpu_set_FIFO_enabled>
					mpu_get_FIFO_size(&size);
     f3c:	e28d0020 	add	r0, sp, #32
     f40:	ebfffea9 	bl	9ec <mpu_get_FIFO_size>
     f44:	ea00002a 	b	ff4 <main+0x470>

				while (size >= 12) {
					size -= 12;

					// next position in buffer
					short imu_data_in_pos_tmp = (imu_data_in_pos + 1) % IMU_BUFF_SIZE;
     f48:	e59f40ec 	ldr	r4, [pc, #236]	; 103c <main+0x4b8>
     f4c:	e1d466b0 	ldrh	r6, [r4, #96]	; 0x60
     f50:	e2866001 	add	r6, r6, #1
     f54:	e20660ff 	and	r6, r6, #255	; 0xff

					// read data and put on local circular buffer
					struct imu_data* data;
					data = &(imu_data_buff[imu_data_in_pos_tmp]);

					mpu_get_FIFO_motion6(&(data->ax_h), &(data->ax_l), &(data->ay_h), &(data->ay_l), &(data->az_h), &(data->az_l),
     f58:	e3a0500e 	mov	r5, #14
     f5c:	e0050596 	mul	r5, r6, r5
					mpu_set_FIFO_enabled(1);
					mpu_get_FIFO_size(&size);
				}

				while (size >= 12) {
					size -= 12;
     f60:	e243300c 	sub	r3, r3, #12
     f64:	e58d3020 	str	r3, [sp, #32]

					// next position in buffer
					short imu_data_in_pos_tmp = (imu_data_in_pos + 1) % IMU_BUFF_SIZE;

					// check for overflow
					if (imu_data_in_pos_tmp == imu_data_out_pos) {
     f68:	e1d436b2 	ldrh	r3, [r4, #98]	; 0x62
     f6c:	e1560003 	cmp	r6, r3
						log_string_warning("LPC overflow\n");
						// the oldest data will be overwritten
						imu_data_out_pos = ++imu_data_out_pos % IMU_BUFF_SIZE;
     f70:	02863001 	addeq	r3, r6, #1
     f74:	020330ff 	andeq	r3, r3, #255	; 0xff
     f78:	01c436b2 	strheq	r3, [r4, #98]	; 0x62

					// read data and put on local circular buffer
					struct imu_data* data;
					data = &(imu_data_buff[imu_data_in_pos_tmp]);

					mpu_get_FIFO_motion6(&(data->ax_h), &(data->ax_l), &(data->ay_h), &(data->ay_l), &(data->az_h), &(data->az_l),
     f7c:	e59f30c0 	ldr	r3, [pc, #192]	; 1044 <main+0x4c0>
     f80:	e0830005 	add	r0, r3, r5
     f84:	e2802004 	add	r2, r0, #4
     f88:	e58d2000 	str	r2, [sp]
     f8c:	e2802005 	add	r2, r0, #5
     f90:	e58d2004 	str	r2, [sp, #4]
     f94:	e2802006 	add	r2, r0, #6
     f98:	e58d2008 	str	r2, [sp, #8]
     f9c:	e2802007 	add	r2, r0, #7
     fa0:	e58d200c 	str	r2, [sp, #12]
     fa4:	e2852008 	add	r2, r5, #8
     fa8:	e0833002 	add	r3, r3, r2
     fac:	e2832001 	add	r2, r3, #1
     fb0:	e58d3010 	str	r3, [sp, #16]
     fb4:	e58d2014 	str	r2, [sp, #20]
     fb8:	e2832002 	add	r2, r3, #2
     fbc:	e2833003 	add	r3, r3, #3
     fc0:	e58d2018 	str	r2, [sp, #24]
     fc4:	e58d301c 	str	r3, [sp, #28]
     fc8:	e2802002 	add	r2, r0, #2
     fcc:	e2803003 	add	r3, r0, #3
     fd0:	e2801001 	add	r1, r0, #1
     fd4:	ebfffebd 	bl	ad0 <mpu_get_FIFO_motion6>
							&(data->gx_h), &(data->gx_l), &(data->gy_h), &(data->gy_l), &(data->gz_h), &(data->gz_l));
					data->timestamp = timestamp++;
     fd8:	e59f3068 	ldr	r3, [pc, #104]	; 1048 <main+0x4c4>
     fdc:	e19420b3 	ldrh	r2, [r4, r3]
     fe0:	e0845005 	add	r5, r4, r5
     fe4:	e1c527b0 	strh	r2, [r5, #112]	; 0x70
     fe8:	e2822001 	add	r2, r2, #1
     fec:	e18420b3 	strh	r2, [r4, r3]
//					protocol_out_char(data->gz_h);
//					protocol_out_char(data->gz_l);
//					protocol_out_char(0xFF);
//					protocol_out_char(0xFF);

					imu_data_in_pos = imu_data_in_pos_tmp;
     ff0:	e1c466b0 	strh	r6, [r4, #96]	; 0x60
					mpu_reset_FIFO();
					mpu_set_FIFO_enabled(1);
					mpu_get_FIFO_size(&size);
				}

				while (size >= 12) {
     ff4:	e59d3020 	ldr	r3, [sp, #32]
     ff8:	e353000b 	cmp	r3, #11
     ffc:	caffffd1 	bgt	f48 <main+0x3c4>

					imu_data_in_pos = imu_data_in_pos_tmp;
				}
			}

			imu_data_available = 0;
    1000:	e59f3034 	ldr	r3, [pc, #52]	; 103c <main+0x4b8>
    1004:	e3a02000 	mov	r2, #0
    1008:	e5c32014 	strb	r2, [r3, #20]
    100c:	eaffffb4 	b	ee4 <main+0x360>
    1010:	e01fc000 	.word	0xe01fc000
    1014:	e01fc100 	.word	0xe01fc100
    1018:	e002c000 	.word	0xe002c000
    101c:	e0070000 	.word	0xe0070000
    1020:	00000378 	.word	0x00000378
    1024:	e0034000 	.word	0xe0034000
    1028:	e0004000 	.word	0xe0004000
    102c:	e0008000 	.word	0xe0008000
    1030:	00000126 	.word	0x00000126
    1034:	e0010000 	.word	0xe0010000
    1038:	0000120c 	.word	0x0000120c
    103c:	4000009c 	.word	0x4000009c
    1040:	000003b4 	.word	0x000003b4
    1044:	40000100 	.word	0x40000100
    1048:	00000e64 	.word	0x00000e64

0000104c <encoder_pulse_in_isr>:
}

/**
 * Count the encoder pulses using CAP2.0-2 as interrupt sources
 */
void encoder_pulse_in_isr(void) {
    104c:	e92d000e 	push	{r1, r2, r3}

	log_string_debug(">> encoder_pulse_in_isr\n");

	const unsigned short ir = T2IR;
    1050:	e59f3084 	ldr	r3, [pc, #132]	; 10dc <encoder_pulse_in_isr+0x90>
    1054:	e5d32000 	ldrb	r2, [r3]

	if (ir & (0x1 << 4)) { //CAP2.0 left encoder
    1058:	e3120010 	tst	r2, #16
    105c:	0a000006 	beq	107c <encoder_pulse_in_isr+0x30>
		log_string_debug("FIQ1\n");
		encoder_count[0]++;
    1060:	e59f2078 	ldr	r2, [pc, #120]	; 10e0 <encoder_pulse_in_isr+0x94>
    1064:	e5921e68 	ldr	r1, [r2, #3688]	; 0xe68
    1068:	e2811001 	add	r1, r1, #1
    106c:	e5821e68 	str	r1, [r2, #3688]	; 0xe68
		T2IR |= 0x1 << 4; // reset CAP2.0
    1070:	e5d32000 	ldrb	r2, [r3]
    1074:	e3822010 	orr	r2, r2, #16
    1078:	ea000003 	b	108c <encoder_pulse_in_isr+0x40>
	}
	else if (ir & (0x1 << 5)) { //CAP2.1 left encoder
    107c:	e3120020 	tst	r2, #32
    1080:	0a000003 	beq	1094 <encoder_pulse_in_isr+0x48>
		log_string_debug("FIQ2\n");
		//detectar sentido
		T2IR |= 0x1 << 5; // reset CAP2.1
    1084:	e5d32000 	ldrb	r2, [r3]
    1088:	e3822020 	orr	r2, r2, #32
    108c:	e5c32000 	strb	r2, [r3]
    1090:	ea00000c 	b	10c8 <encoder_pulse_in_isr+0x7c>
	}
	else if (ir & (0x1 << 6)) { //CAP2.2 right encoder
    1094:	e3120040 	tst	r2, #64	; 0x40
    1098:	0a000006 	beq	10b8 <encoder_pulse_in_isr+0x6c>
		log_string_debug("FIQ3\n");
		encoder_count[1]++;
    109c:	e59f203c 	ldr	r2, [pc, #60]	; 10e0 <encoder_pulse_in_isr+0x94>
    10a0:	e5921e6c 	ldr	r1, [r2, #3692]	; 0xe6c
    10a4:	e2811001 	add	r1, r1, #1
    10a8:	e5821e6c 	str	r1, [r2, #3692]	; 0xe6c
		T2IR |= 0x1 << 6; // reset CAP2.1
    10ac:	e5d32000 	ldrb	r2, [r3]
    10b0:	e3822040 	orr	r2, r2, #64	; 0x40
    10b4:	eafffff4 	b	108c <encoder_pulse_in_isr+0x40>
	}
	else {
		log_string_debug("FIQ4\n");
		//detectar sentido
		EXTINT |= 0x1 << 0; // reset EINT0
    10b8:	e59f3024 	ldr	r3, [pc, #36]	; 10e4 <encoder_pulse_in_isr+0x98>
    10bc:	e5d32040 	ldrb	r2, [r3, #64]	; 0x40
    10c0:	e3822001 	orr	r2, r2, #1
    10c4:	e5c32040 	strb	r2, [r3, #64]	; 0x40
	}

	log_string_debug("<< encoder_pulse_in_isr\n");

	VICVectAddr = 0;
    10c8:	e3a02000 	mov	r2, #0
    10cc:	e3e03000 	mvn	r3, #0
    10d0:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfffff031
}
    10d4:	e8bd000e 	pop	{r1, r2, r3}
    10d8:	e25ef004 	subs	pc, lr, #4
    10dc:	e0070000 	.word	0xe0070000
    10e0:	4000009c 	.word	0x4000009c
    10e4:	e01fc100 	.word	0xe01fc100

000010e8 <get_ir_sensor_data>:
 * Return the value read from the i'th sensor
 */
int get_ir_sensor_data(unsigned short i) {

	int val = 0;
	switch (i) {
    10e8:	e24000c3 	sub	r0, r0, #195	; 0xc3
    10ec:	e3500004 	cmp	r0, #4
    10f0:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    10f4:	ea00001d 	b	1170 <get_ir_sensor_data+0x88>
    10f8:	0000110c 	.word	0x0000110c
    10fc:	0000111c 	.word	0x0000111c
    1100:	0000112c 	.word	0x0000112c
    1104:	0000113c 	.word	0x0000113c
    1108:	0000114c 	.word	0x0000114c
	case IR_L:
		while(ADDR0 & ((0x1 << 31) == 0));
    110c:	e59f3064 	ldr	r3, [pc, #100]	; 1178 <get_ir_sensor_data+0x90>
    1110:	e5932010 	ldr	r2, [r3, #16]
		val = (ADDR0 >> 6) & 0x3FF;
    1114:	e5930010 	ldr	r0, [r3, #16]
    1118:	ea00000e 	b	1158 <get_ir_sensor_data+0x70>
		val >>= 0x2; // they want a value from 1 to 255
		val += (val == 0);
		break;
	case IR_ML:
		while(ADDR1 & ((0x1 << 31) == 0));
    111c:	e59f3054 	ldr	r3, [pc, #84]	; 1178 <get_ir_sensor_data+0x90>
    1120:	e5932014 	ldr	r2, [r3, #20]
		val = (ADDR1 >> 6) & 0x3FF;
    1124:	e5930014 	ldr	r0, [r3, #20]
    1128:	ea00000a 	b	1158 <get_ir_sensor_data+0x70>
		val >>= 0x2; // they want a value from 1 to 255
		val += (val == 0);
		break;
	case IR_M:
		while(ADDR2 & ((0x1 << 31) == 0));
    112c:	e59f3044 	ldr	r3, [pc, #68]	; 1178 <get_ir_sensor_data+0x90>
    1130:	e5932018 	ldr	r2, [r3, #24]
		val = (ADDR2 >> 6) & 0x3FF;
    1134:	e5930018 	ldr	r0, [r3, #24]
    1138:	ea000006 	b	1158 <get_ir_sensor_data+0x70>
		val >>= 0x2; // they want a value from 1 to 255
		val += (val == 0);
		break;
	case IR_MR:
		while(ADDR3 & ((0x1 << 31) == 0));
    113c:	e59f3034 	ldr	r3, [pc, #52]	; 1178 <get_ir_sensor_data+0x90>
    1140:	e593201c 	ldr	r2, [r3, #28]
		val = (ADDR3 >> 6) & 0x3FF;
    1144:	e593001c 	ldr	r0, [r3, #28]
    1148:	ea000002 	b	1158 <get_ir_sensor_data+0x70>
		val >>= 0x2; // they want a value from 1 to 255
		val += (val == 0);
		break;
	case IR_R:
		while(ADDR4 & ((0x1 << 31) == 0));
    114c:	e59f3024 	ldr	r3, [pc, #36]	; 1178 <get_ir_sensor_data+0x90>
    1150:	e5932020 	ldr	r2, [r3, #32]
		val = (ADDR4 >> 6) & 0x3FF;
    1154:	e5930020 	ldr	r0, [r3, #32]
    1158:	e1a00800 	lsl	r0, r0, #16
		val >>= 0x2; // they want a value from 1 to 255
		val += (val == 0);
    115c:	e1b00c20 	lsrs	r0, r0, #24
    1160:	13a03000 	movne	r3, #0
    1164:	03a03001 	moveq	r3, #1
    1168:	e0830000 	add	r0, r3, r0
		break;
    116c:	e12fff1e 	bx	lr
/**
 * Return the value read from the i'th sensor
 */
int get_ir_sensor_data(unsigned short i) {

	int val = 0;
    1170:	e3a00000 	mov	r0, #0
		val += (val == 0);
		break;
	}

	return val;
}
    1174:	e12fff1e 	bx	lr
    1178:	e0034000 	.word	0xe0034000

0000117c <get_encoder_count>:
/**
 * Return the count value read from the i'th sensor
 */
int get_encoder_count(unsigned short i) {
	unsigned int val, res;
	val = encoder_count[i - ENCODER_L];
    117c:	e59f3018 	ldr	r3, [pc, #24]	; 119c <get_encoder_count+0x20>
    1180:	e24000c1 	sub	r0, r0, #193	; 0xc1
    1184:	e0833100 	add	r3, r3, r0, lsl #2
    1188:	e5932e68 	ldr	r2, [r3, #3688]	; 0xe68
	res = val - sent_encoder_count[i - ENCODER_L];
    118c:	e5930e70 	ldr	r0, [r3, #3696]	; 0xe70
	sent_encoder_count[i - ENCODER_L] = val;
    1190:	e5832e70 	str	r2, [r3, #3696]	; 0xe70
	return res;
}
    1194:	e0600002 	rsb	r0, r0, r2
    1198:	e12fff1e 	bx	lr
    119c:	4000009c 	.word	0x4000009c

000011a0 <set_wheel_pwm>:
/**
 * Set the output pwm value
 */
void set_wheel_pwm(unsigned short left_wheel, unsigned short right_wheel) {

	if (right_wheel & PWM_DIR) { // Forward
    11a0:	e3110080 	tst	r1, #128	; 0x80
		T0MR2 = 256;
		T0MR1 = 256 - (right_wheel & ~PWM_DIR)*2;
    11a4:	13c11080 	bicne	r1, r1, #128	; 0x80
    11a8:	e59f3054 	ldr	r3, [pc, #84]	; 1204 <set_wheel_pwm+0x64>
    11ac:	12611080 	rsbne	r1, r1, #128	; 0x80
	} else { // Backwards
		T0MR1 = 256;
		T0MR2 = 256 - right_wheel*2;
    11b0:	02611080 	rsbeq	r1, r1, #128	; 0x80
    11b4:	e3a02c01 	mov	r2, #256	; 0x100
 */
void set_wheel_pwm(unsigned short left_wheel, unsigned short right_wheel) {

	if (right_wheel & PWM_DIR) { // Forward
		T0MR2 = 256;
		T0MR1 = 256 - (right_wheel & ~PWM_DIR)*2;
    11b8:	11a01081 	lslne	r1, r1, #1
	} else { // Backwards
		T0MR1 = 256;
		T0MR2 = 256 - right_wheel*2;
    11bc:	01a01081 	lsleq	r1, r1, #1
 * Set the output pwm value
 */
void set_wheel_pwm(unsigned short left_wheel, unsigned short right_wheel) {

	if (right_wheel & PWM_DIR) { // Forward
		T0MR2 = 256;
    11c0:	15832020 	strne	r2, [r3, #32]
		T0MR1 = 256 - (right_wheel & ~PWM_DIR)*2;
	} else { // Backwards
		T0MR1 = 256;
    11c4:	0583201c 	streq	r2, [r3, #28]
 */
void set_wheel_pwm(unsigned short left_wheel, unsigned short right_wheel) {

	if (right_wheel & PWM_DIR) { // Forward
		T0MR2 = 256;
		T0MR1 = 256 - (right_wheel & ~PWM_DIR)*2;
    11c8:	1583101c 	strne	r1, [r3, #28]
	} else { // Backwards
		T0MR1 = 256;
		T0MR2 = 256 - right_wheel*2;
    11cc:	05831020 	streq	r1, [r3, #32]
	}

	if (left_wheel & PWM_DIR) { // Forward
    11d0:	e3100080 	tst	r0, #128	; 0x80
		T1MR0 = 256;
		T1MR1 = 256 - (left_wheel & ~PWM_DIR)*2;
    11d4:	13c00080 	bicne	r0, r0, #128	; 0x80
    11d8:	e59f3028 	ldr	r3, [pc, #40]	; 1208 <set_wheel_pwm+0x68>
    11dc:	12600080 	rsbne	r0, r0, #128	; 0x80
	} else { // Backwards
		T1MR1 = 256;
		T1MR0 = 256 - left_wheel*2;
    11e0:	02600080 	rsbeq	r0, r0, #128	; 0x80
    11e4:	e3a02c01 	mov	r2, #256	; 0x100
		T0MR2 = 256 - right_wheel*2;
	}

	if (left_wheel & PWM_DIR) { // Forward
		T1MR0 = 256;
		T1MR1 = 256 - (left_wheel & ~PWM_DIR)*2;
    11e8:	11a00080 	lslne	r0, r0, #1
	} else { // Backwards
		T1MR1 = 256;
		T1MR0 = 256 - left_wheel*2;
    11ec:	01a00080 	lsleq	r0, r0, #1
		T0MR1 = 256;
		T0MR2 = 256 - right_wheel*2;
	}

	if (left_wheel & PWM_DIR) { // Forward
		T1MR0 = 256;
    11f0:	15832018 	strne	r2, [r3, #24]
		T1MR1 = 256 - (left_wheel & ~PWM_DIR)*2;
	} else { // Backwards
		T1MR1 = 256;
    11f4:	0583201c 	streq	r2, [r3, #28]
		T0MR2 = 256 - right_wheel*2;
	}

	if (left_wheel & PWM_DIR) { // Forward
		T1MR0 = 256;
		T1MR1 = 256 - (left_wheel & ~PWM_DIR)*2;
    11f8:	1583001c 	strne	r0, [r3, #28]
	} else { // Backwards
		T1MR1 = 256;
		T1MR0 = 256 - left_wheel*2;
    11fc:	05830018 	streq	r0, [r3, #24]
    1200:	e12fff1e 	bx	lr
    1204:	e0004000 	.word	0xe0004000
    1208:	e0008000 	.word	0xe0008000

0000120c <protocol_in>:
 * Communication Protocol state machine implementation;
 * This is triggered on uart1 interruption
 * This handles the following commands
 *
 */
void protocol_in(void){
    120c:	e24ee004 	sub	lr, lr, #4
    1210:	e92d501f 	push	{r0, r1, r2, r3, r4, ip, lr}
    1214:	e24dd00c 	sub	sp, sp, #12

	volatile char dummy;
	volatile char iir;

	// Repeat while there is at least one interrupt source.
	while (((iir = U1IIR) & 0x01) == 0) {
    1218:	ea00008b 	b	144c <protocol_in+0x240>
		switch (iir & 0x0E) {
    121c:	e5dd2006 	ldrb	r2, [sp, #6]
    1220:	e202200e 	and	r2, r2, #14
    1224:	e352000c 	cmp	r2, #12
    1228:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
    122c:	ea000086 	b	144c <protocol_in+0x240>
    1230:	00001444 	.word	0x00001444
    1234:	0000144c 	.word	0x0000144c
    1238:	00001438 	.word	0x00001438
    123c:	0000144c 	.word	0x0000144c
    1240:	0000126c 	.word	0x0000126c
    1244:	0000144c 	.word	0x0000144c
    1248:	00001264 	.word	0x00001264
    124c:	0000144c 	.word	0x0000144c
    1250:	0000144c 	.word	0x0000144c
    1254:	0000144c 	.word	0x0000144c
    1258:	0000144c 	.word	0x0000144c
    125c:	0000144c 	.word	0x0000144c
    1260:	0000126c 	.word	0x0000126c
		case 0x06: // Receive Line Status
			dummy = U1LSR; // Just clear the interrupt source
    1264:	e5d33014 	ldrb	r3, [r3, #20]
    1268:	ea000076 	b	1448 <protocol_in+0x23c>
			break;

		case 0x04: // Receive Data Available
		case 0x0C: // Character Time-Out
			cmd_in.buff[cmd_in.i] = U1RBR;
    126c:	e59f4204 	ldr	r4, [pc, #516]	; 1478 <protocol_in+0x26c>
    1270:	e5d33000 	ldrb	r3, [r3]
    1274:	e594203c 	ldr	r2, [r4, #60]	; 0x3c
    1278:	e20330ff 	and	r3, r3, #255	; 0xff
    127c:	e0841002 	add	r1, r4, r2

			// State machine
			if (cmd_in.buff[cmd_in.i] == END_CMD) {
    1280:	e35300fe 	cmp	r3, #254	; 0xfe
			dummy = U1LSR; // Just clear the interrupt source
			break;

		case 0x04: // Receive Data Available
		case 0x0C: // Character Time-Out
			cmd_in.buff[cmd_in.i] = U1RBR;
    1284:	e5c13040 	strb	r3, [r1, #64]	; 0x40

			// State machine
			if (cmd_in.buff[cmd_in.i] == END_CMD) {
    1288:	1a000064 	bne	1420 <protocol_in+0x214>
				// ENGINES
				if (cmd_in.buff[(cmd_in.i-2) & (CMD_BUFF_SIZE-1)] == ENGINES) {
    128c:	e2423002 	sub	r3, r2, #2
    1290:	e203301f 	and	r3, r3, #31
    1294:	e0843003 	add	r3, r4, r3
    1298:	e5d33040 	ldrb	r3, [r3, #64]	; 0x40
    129c:	e35300b0 	cmp	r3, #176	; 0xb0
    12a0:	e2423001 	sub	r3, r2, #1
    12a4:	1a000007 	bne	12c8 <protocol_in+0xbc>
					set_wheel_pwm((unsigned short) (cmd_in.buff[(cmd_in.i-1) & (CMD_BUFF_SIZE-1)]),
								(unsigned short) (cmd_in.buff[(cmd_in.i) & (CMD_BUFF_SIZE-1)]));
    12a8:	e202201f 	and	r2, r2, #31

			// State machine
			if (cmd_in.buff[cmd_in.i] == END_CMD) {
				// ENGINES
				if (cmd_in.buff[(cmd_in.i-2) & (CMD_BUFF_SIZE-1)] == ENGINES) {
					set_wheel_pwm((unsigned short) (cmd_in.buff[(cmd_in.i-1) & (CMD_BUFF_SIZE-1)]),
    12ac:	e203301f 	and	r3, r3, #31
    12b0:	e0843003 	add	r3, r4, r3
								(unsigned short) (cmd_in.buff[(cmd_in.i) & (CMD_BUFF_SIZE-1)]));
    12b4:	e0844002 	add	r4, r4, r2

			// State machine
			if (cmd_in.buff[cmd_in.i] == END_CMD) {
				// ENGINES
				if (cmd_in.buff[(cmd_in.i-2) & (CMD_BUFF_SIZE-1)] == ENGINES) {
					set_wheel_pwm((unsigned short) (cmd_in.buff[(cmd_in.i-1) & (CMD_BUFF_SIZE-1)]),
    12b8:	e5d30040 	ldrb	r0, [r3, #64]	; 0x40
    12bc:	e5d41040 	ldrb	r1, [r4, #64]	; 0x40
    12c0:	ebffffb6 	bl	11a0 <set_wheel_pwm>
    12c4:	ea000055 	b	1420 <protocol_in+0x214>
								(unsigned short) (cmd_in.buff[(cmd_in.i) & (CMD_BUFF_SIZE-1)]));
				}
				// SYNC
				else if (cmd_in.buff[(cmd_in.i-1) & (CMD_BUFF_SIZE-1)] == SYNC) {
    12c8:	e203301f 	and	r3, r3, #31
    12cc:	e0843003 	add	r3, r4, r3
    12d0:	e5d33040 	ldrb	r3, [r3, #64]	; 0x40
    12d4:	e35300a0 	cmp	r3, #160	; 0xa0
    12d8:	1a000050 	bne	1420 <protocol_in+0x214>

					// Encoders
					int count = get_encoder_count(ENCODER_L);
    12dc:	e3a000c1 	mov	r0, #193	; 0xc1
    12e0:	ebffffa5 	bl	117c <get_encoder_count>
					cmd_out.buff[0] = (count >> 0x8) & 0xFF;
    12e4:	e1a03440 	asr	r3, r0, #8
    12e8:	e5c4301c 	strb	r3, [r4, #28]
					cmd_out.buff[1] = count & 0xFF;
    12ec:	e5c4001d 	strb	r0, [r4, #29]
					count = get_encoder_count(ENCODER_R);
    12f0:	e3a000c2 	mov	r0, #194	; 0xc2
    12f4:	ebffffa0 	bl	117c <get_encoder_count>
					cmd_out.buff[2] = (count >> 0x8) & 0xFF;
    12f8:	e1a03440 	asr	r3, r0, #8
    12fc:	e5c4301e 	strb	r3, [r4, #30]
					cmd_out.buff[3] = count & 0xFF;
    1300:	e5c4001f 	strb	r0, [r4, #31]
					// Infra Red
					char val = get_ir_sensor_data(IR_L);
    1304:	e3a000c3 	mov	r0, #195	; 0xc3
    1308:	ebffff76 	bl	10e8 <get_ir_sensor_data>
    130c:	e5c40020 	strb	r0, [r4, #32]
					cmd_out.buff[4] = val;
					val = get_ir_sensor_data(IR_ML);
    1310:	e3a000c4 	mov	r0, #196	; 0xc4
    1314:	ebffff73 	bl	10e8 <get_ir_sensor_data>
    1318:	e5c40021 	strb	r0, [r4, #33]	; 0x21
					cmd_out.buff[5] = val;
					val = get_ir_sensor_data(IR_M);
    131c:	e3a000c5 	mov	r0, #197	; 0xc5
    1320:	ebffff70 	bl	10e8 <get_ir_sensor_data>
    1324:	e5c40022 	strb	r0, [r4, #34]	; 0x22
					cmd_out.buff[6] = val;
					val = get_ir_sensor_data(IR_MR);
    1328:	e3a000c6 	mov	r0, #198	; 0xc6
    132c:	ebffff6d 	bl	10e8 <get_ir_sensor_data>
    1330:	e5c40023 	strb	r0, [r4, #35]	; 0x23
					cmd_out.buff[7] = val;
					val = get_ir_sensor_data(IR_R);
    1334:	e3a000c7 	mov	r0, #199	; 0xc7
    1338:	ebffff6a 	bl	10e8 <get_ir_sensor_data>
					cmd_out.buff[8] = val;
					// IMU
					// check if data ready, if yes send new data, if not send again last data sent
					if (imu_data_out_pos != imu_data_in_pos) {
    133c:	e1d436b2 	ldrh	r3, [r4, #98]	; 0x62
    1340:	e1d426b0 	ldrh	r2, [r4, #96]	; 0x60
    1344:	e1520003 	cmp	r2, r3
						imu_data_out_pos = ++imu_data_out_pos % IMU_BUFF_SIZE;
    1348:	12833001 	addne	r3, r3, #1
    134c:	120330ff 	andne	r3, r3, #255	; 0xff
    1350:	11c436b2 	strhne	r3, [r4, #98]	; 0x62
					}
					struct imu_data* data;
					data = &(imu_data_buff[imu_data_out_pos]);
    1354:	e59f311c 	ldr	r3, [pc, #284]	; 1478 <protocol_in+0x26c>
    1358:	e1d326b2 	ldrh	r2, [r3, #98]	; 0x62

					cmd_out.buff[9] = data->ax_h;
    135c:	e3a0100e 	mov	r1, #14
    1360:	e0213192 	mla	r1, r2, r1, r3
					cmd_out.buff[5] = val;
					val = get_ir_sensor_data(IR_M);
					cmd_out.buff[6] = val;
					val = get_ir_sensor_data(IR_MR);
					cmd_out.buff[7] = val;
					val = get_ir_sensor_data(IR_R);
    1364:	e5c40024 	strb	r0, [r4, #36]	; 0x24
						imu_data_out_pos = ++imu_data_out_pos % IMU_BUFF_SIZE;
					}
					struct imu_data* data;
					data = &(imu_data_buff[imu_data_out_pos]);

					cmd_out.buff[9] = data->ax_h;
    1368:	e5d10064 	ldrb	r0, [r1, #100]	; 0x64
    136c:	e5c30025 	strb	r0, [r3, #37]	; 0x25
					cmd_out.buff[10] = data->ax_l;
    1370:	e5d10065 	ldrb	r0, [r1, #101]	; 0x65
    1374:	e5c30026 	strb	r0, [r3, #38]	; 0x26
					cmd_out.buff[11] = data->ay_h;
    1378:	e5d10066 	ldrb	r0, [r1, #102]	; 0x66
    137c:	e5c30027 	strb	r0, [r3, #39]	; 0x27
					cmd_out.buff[12] = data->ay_l;
    1380:	e5d10067 	ldrb	r0, [r1, #103]	; 0x67
    1384:	e5c30028 	strb	r0, [r3, #40]	; 0x28
					cmd_out.buff[13] = data->az_h;
    1388:	e5d10068 	ldrb	r0, [r1, #104]	; 0x68
    138c:	e5c30029 	strb	r0, [r3, #41]	; 0x29
					cmd_out.buff[14] = data->az_l;
    1390:	e5d10069 	ldrb	r0, [r1, #105]	; 0x69
    1394:	e5c3002a 	strb	r0, [r3, #42]	; 0x2a
					cmd_out.buff[15] = data->gx_h;
    1398:	e5d1006a 	ldrb	r0, [r1, #106]	; 0x6a
    139c:	e5c3002b 	strb	r0, [r3, #43]	; 0x2b
					cmd_out.buff[16] = data->gx_l;
    13a0:	e5d1206b 	ldrb	r2, [r1, #107]	; 0x6b
    13a4:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
					cmd_out.buff[17] = data->gy_h;
    13a8:	e5d1006c 	ldrb	r0, [r1, #108]	; 0x6c
    13ac:	e5c3002d 	strb	r0, [r3, #45]	; 0x2d
					cmd_out.buff[18] = data->gy_l;
    13b0:	e5d1006d 	ldrb	r0, [r1, #109]	; 0x6d
    13b4:	e5c3002e 	strb	r0, [r3, #46]	; 0x2e
					cmd_out.buff[19] = data->gz_h;
    13b8:	e5d1006e 	ldrb	r0, [r1, #110]	; 0x6e
    13bc:	e5c3002f 	strb	r0, [r3, #47]	; 0x2f
					cmd_out.buff[20] = data->gz_l;
    13c0:	e5d1206f 	ldrb	r2, [r1, #111]	; 0x6f
    13c4:	e5c32030 	strb	r2, [r3, #48]	; 0x30
					cmd_out.buff[21] = (data->timestamp >> 8) & 0xFF;
    13c8:	e1d127b0 	ldrh	r2, [r1, #112]	; 0x70
					cmd_out.buff[22] = data->timestamp & 0xFF;
    13cc:	e5c32032 	strb	r2, [r3, #50]	; 0x32
					cmd_out.buff[16] = data->gx_l;
					cmd_out.buff[17] = data->gy_h;
					cmd_out.buff[18] = data->gy_l;
					cmd_out.buff[19] = data->gz_h;
					cmd_out.buff[20] = data->gz_l;
					cmd_out.buff[21] = (data->timestamp >> 8) & 0xFF;
    13d0:	e1a01422 	lsr	r1, r2, #8
					cmd_out.buff[22] = data->timestamp & 0xFF;

					// Done
					cmd_out.buff[23] = END_CMD;
    13d4:	e3e02001 	mvn	r2, #1
    13d8:	e5c32033 	strb	r2, [r3, #51]	; 0x33
					cmd_out.buff[24] = '\n';
    13dc:	e282200c 	add	r2, r2, #12
					cmd_out.buff[16] = data->gx_l;
					cmd_out.buff[17] = data->gy_h;
					cmd_out.buff[18] = data->gy_l;
					cmd_out.buff[19] = data->gz_h;
					cmd_out.buff[20] = data->gz_l;
					cmd_out.buff[21] = (data->timestamp >> 8) & 0xFF;
    13e0:	e5c31031 	strb	r1, [r3, #49]	; 0x31
					cmd_out.buff[22] = data->timestamp & 0xFF;

					// Done
					cmd_out.buff[23] = END_CMD;
					cmd_out.buff[24] = '\n';
    13e4:	e5c32034 	strb	r2, [r3, #52]	; 0x34
					cmd_out.i = 25;
    13e8:	e282200f 	add	r2, r2, #15
    13ec:	e5832018 	str	r2, [r3, #24]
    13f0:	e3a03000 	mov	r3, #0
 * Communication Protocol state machine implementation;
 * This is triggered on uart1 interruption
 * This handles the following commands
 *
 */
void protocol_in(void){
    13f4:	e59f2080 	ldr	r2, [pc, #128]	; 147c <protocol_in+0x270>
    13f8:	e0822003 	add	r2, r2, r3
/**
 *
 */
static void protocol_out_cmd(){
	for (unsigned short i = 0; i < cmd_out.i; i++)
		protocol_out_char(cmd_out.buff[i]);
    13fc:	e5d21004 	ldrb	r1, [r2, #4]

/**
 *
 */
static void protocol_out_char(char c){
	U1THR = c;     // TransmitHoldingRegister , DivisorLatchAccessBit must be 0 to transmit
    1400:	e59f2078 	ldr	r2, [pc, #120]	; 1480 <protocol_in+0x274>
    1404:	e5c21000 	strb	r1, [r2]
	while(!(U1LSR & 0x40));
    1408:	e5d21014 	ldrb	r1, [r2, #20]
    140c:	e3110040 	tst	r1, #64	; 0x40
    1410:	0afffffc 	beq	1408 <protocol_in+0x1fc>
    1414:	e2833001 	add	r3, r3, #1

/**
 *
 */
static void protocol_out_cmd(){
	for (unsigned short i = 0; i < cmd_out.i; i++)
    1418:	e3530019 	cmp	r3, #25
    141c:	1afffff4 	bne	13f4 <protocol_in+0x1e8>
					cmd_out.buff[24] = '\n';
					cmd_out.i = 25;
					protocol_out_cmd();
				}
			}
			cmd_in.i = (cmd_in.i + 1) & (CMD_BUFF_SIZE-1);
    1420:	e59f3050 	ldr	r3, [pc, #80]	; 1478 <protocol_in+0x26c>
    1424:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
    1428:	e2822001 	add	r2, r2, #1
    142c:	e202201f 	and	r2, r2, #31
    1430:	e583203c 	str	r2, [r3, #60]	; 0x3c
			break;
    1434:	ea000004 	b	144c <protocol_in+0x240>

		case 0x02: // THRE Interrupt, transmit interrupt
			U1THR = dummy; // Just clear the interrupt source
    1438:	e5dd2007 	ldrb	r2, [sp, #7]
    143c:	e5c32000 	strb	r2, [r3]
			break;
    1440:	ea000001 	b	144c <protocol_in+0x240>

		case 0x00: // Modem Interrupt
			dummy = U1MSR; // Just clear the interrupt source
    1444:	e5d33018 	ldrb	r3, [r3, #24]
    1448:	e5cd3007 	strb	r3, [sp, #7]

	volatile char dummy;
	volatile char iir;

	// Repeat while there is at least one interrupt source.
	while (((iir = U1IIR) & 0x01) == 0) {
    144c:	e59f302c 	ldr	r3, [pc, #44]	; 1480 <protocol_in+0x274>
    1450:	e5d32008 	ldrb	r2, [r3, #8]
    1454:	e5cd2006 	strb	r2, [sp, #6]
    1458:	e5dd2006 	ldrb	r2, [sp, #6]
    145c:	e3120001 	tst	r2, #1
    1460:	0affff6d 	beq	121c <protocol_in+0x10>
		}
	}

	log_string_debug("<< protocol_in\n");

	VICVectAddr = 0;
    1464:	e3a02000 	mov	r2, #0
    1468:	e3e03000 	mvn	r3, #0
    146c:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfffff031
}
    1470:	e28dd00c 	add	sp, sp, #12
    1474:	e8fd901f 	ldm	sp!, {r0, r1, r2, r3, r4, ip, pc}^
    1478:	4000009c 	.word	0x4000009c
    147c:	400000b4 	.word	0x400000b4
    1480:	e0010000 	.word	0xe0010000

00001484 <ascii>:
    1484:	33323130 37363534 42413938 46454443     0123456789ABCDEF
	...
