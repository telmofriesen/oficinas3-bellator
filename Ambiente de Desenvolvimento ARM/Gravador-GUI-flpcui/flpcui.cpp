/******************************************************************************

Project:           Cross-Platform GUI for lpc21isp, a command line ISP for
                   NXP LPC1000 / LPC2000 family and Analog Devices ADUC70xx
                   * This program has lpc21isp compiled into it.

Compiler:          Microsoft VC 6/7, Microsoft VS2008, Microsoft VS2010,
                   GCC Cygwin, GCC Linux, GCC ARM ELF

Author:            Moses McKnight (moses@texband.net)

Copyright:         (c) Moses McKnight 2011, All rights reserved

    This file is part of flpcui.

    flpcui is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    any later version.

    flpcui is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    and GNU General Public License along with flpcui.
    If not, see <http://www.gnu.org/licenses/>.
*/
// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "flpcui.h"
#include <FL/Fl_Preferences.H>
#include <FL/filename.H>

Fl_Menu_Item lpcprog_ui::menu_baud_choice[] = {
 {"4800", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"9600", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"19200", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"38400", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"57600", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"115200", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"230400", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"576000", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"1152000", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item lpcprog_ui::menu_chip_choice[] = {
 {"NXP", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Analog Devices", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item lpcprog_ui::menu_debug_choice[] = {
 {"0 - very quiet", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"1 - quiet", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"2 - indicate progress", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"3 - first level debug", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"4 - second level debug", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"5 - log comm\'s", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item lpcprog_ui::menu_[] = {
 {"&File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 12, 0},
 {"E&xit", 0,  (Fl_Callback*)on_exit, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Help", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 12, 0},
 {"Help", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"About", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

lpcprog_ui::lpcprog_ui() {
  { win = new Fl_Double_Window(655, 645, "Flpcui - LPC1000 / LPC2000 ISP");
    win->labelsize(12);
    win->callback((Fl_Callback*)on_exit, (void*)(this));
    { Fl_Group* o = new Fl_Group(5, 25, 430, 120);
      o->box(FL_BORDER_BOX);
      { Fl_Button* o = new Fl_Button(15, 35, 125, 25, "Open File...");
        o->labelsize(12);
        o->callback((Fl_Callback*)on_open_file);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(90, 105, 125, 25, "Find Device");
        o->labelsize(12);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(225, 105, 125, 25, "Program");
        o->labelsize(12);
        o->callback((Fl_Callback*)on_program);
      } // Fl_Button* o
      { file_input = new Fl_Output(45, 70, 380, 25, "File:");
        file_input->labelsize(12);
        file_input->textsize(12);
      } // Fl_Output* file_input
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(440, 25, 210, 120);
      o->box(FL_BORDER_BOX);
      { port_choice = new Fl_Choice(475, 50, 150, 25, "Serial Port:");
        port_choice->down_box(FL_BORDER_BOX);
        port_choice->labelsize(12);
        port_choice->textsize(12);
        port_choice->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Choice* port_choice
      { baud_choice = new Fl_Choice(475, 100, 150, 25, "Baud Rate:");
        baud_choice->down_box(FL_BORDER_BOX);
        baud_choice->labelsize(12);
        baud_choice->textsize(12);
        baud_choice->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        baud_choice->menu(menu_baud_choice);
      } // Fl_Choice* baud_choice
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(5, 150, 645, 100);
      o->box(FL_BORDER_BOX);
      o->labelsize(12);
      { erase_check = new Fl_Check_Button(20, 165, 25, 25, "Erase");
        erase_check->down_box(FL_DOWN_BOX);
        erase_check->labelsize(12);
      } // Fl_Check_Button* erase_check
      { verify_check = new Fl_Check_Button(20, 190, 25, 25, "Verify");
        verify_check->down_box(FL_DOWN_BOX);
        verify_check->labelsize(12);
      } // Fl_Check_Button* verify_check
      { chip_choice = new Fl_Choice(185, 165, 100, 25, "Chip Type");
        chip_choice->down_box(FL_BORDER_BOX);
        chip_choice->labelsize(12);
        chip_choice->textsize(12);
        chip_choice->menu(menu_chip_choice);
      } // Fl_Choice* chip_choice
      { osc_speed_input = new Fl_Int_Input(210, 205, 75, 25, "Osc. Speed (kHz)");
        osc_speed_input->type(2);
        osc_speed_input->labelsize(12);
        osc_speed_input->textsize(12);
      } // Fl_Int_Input* osc_speed_input
      { control_check = new Fl_Check_Button(320, 157, 25, 25, "Use RTS/DTS");
        control_check->down_box(FL_DOWN_BOX);
        control_check->labelsize(12);
      } // Fl_Check_Button* control_check
      { swap_check = new Fl_Check_Button(320, 177, 25, 25, "Swap RTS/DTS");
        swap_check->down_box(FL_DOWN_BOX);
        swap_check->labelsize(12);
      } // Fl_Check_Button* swap_check
      { invert_check = new Fl_Check_Button(320, 197, 25, 25, "Invert RTS/DTS");
        invert_check->down_box(FL_DOWN_BOX);
        invert_check->labelsize(12);
      } // Fl_Check_Button* invert_check
      { hdup_check = new Fl_Check_Button(320, 217, 25, 25, "Half Duplex");
        hdup_check->down_box(FL_DOWN_BOX);
        hdup_check->labelsize(12);
      } // Fl_Check_Button* hdup_check
      { debug_choice = new Fl_Choice(475, 180, 130, 25, "Debug Level");
        debug_choice->down_box(FL_BORDER_BOX);
        debug_choice->labelsize(12);
        debug_choice->textsize(12);
        debug_choice->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        debug_choice->menu(menu_debug_choice);
      } // Fl_Choice* debug_choice
      o->end();
    } // Fl_Group* o
    { Fl_Scroll* o = new Fl_Scroll(5, 255, 645, 385);
      o->labelsize(12);
      { dbg_text = new Fl_Text_Display(5, 255, 645, 385);
        dbg_text->labelsize(12);
        dbg_text->textsize(12);
      } // Fl_Text_Display* dbg_text
      o->end();
    } // Fl_Scroll* o
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 655, 25);
      o->box(FL_FLAT_BOX);
      o->labelsize(12);
      o->textsize(12);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    win->end();
  } // Fl_Double_Window* win
}

void lpcprog_ui::show(int argc, char **argv) {
  read_prefs();
  win->show(argc, argv);
}

void lpcprog_ui::write_prefs() {
  Fl_Preferences app( Fl_Preferences::USER, "flpcui", "flpcui" );
  
  app.set("file", file_input->value());
  app.set("defdir", default_dir.c_str());
  app.set("port", port_choice->text());
  app.set("baud", baud_choice->value());
  app.set("chip", chip_choice->value());
  app.set("xtal", osc_speed_input->value());
  app.set("erase", erase_check->value());
  app.set("verify", verify_check->value());
  app.set("use_control", control_check->value());
  app.set("swap_control", swap_check->value());
  app.set("invert_control", invert_check->value());
  app.set("half_duplex", hdup_check->value());
  app.set("debug_level", debug_choice->value());
}

void lpcprog_ui::read_prefs() {
  int boolVal;
  int intVal;
  char buffer[FL_PATH_MAX];
  
  Fl_Preferences app( Fl_Preferences::USER, "flpcui", "flpcui" );
  
  app.get("file", buffer, "", FL_PATH_MAX-1);
  file_input->value(buffer);
  app.get("defdir", buffer, "", FL_PATH_MAX-1);
  default_dir = std::string(buffer);
  app.get("port", buffer, "", FL_PATH_MAX-1);
  port_choice->value(port_choice->find_index(buffer));
  app.get("baud", intVal, 0);
  baud_choice->value(intVal);
  app.get("chip", intVal, 0);
  chip_choice->value(intVal);
  app.get("xtal", buffer, "", FL_PATH_MAX-1);
  osc_speed_input->value(buffer);
  app.get("erase", boolVal, 0);
  erase_check->value(boolVal);
  app.get("verify", boolVal, 0);
  verify_check->value(boolVal);
  app.get("use_control", boolVal, 0);
  control_check->value(boolVal);
  app.get("swap_control", boolVal, 0);
  swap_check->value(boolVal);
  app.get("invert_control", boolVal, 0);
  invert_check->value(boolVal);
  app.get("half_duplex", boolVal, 0);
  hdup_check->value(boolVal);
  app.get("debug_level", intVal, 2);
  debug_choice->value(intVal);
}

void on_exit(Fl_Widget*, void*) {
  ui->write_prefs();
  
  exit(0);
}
